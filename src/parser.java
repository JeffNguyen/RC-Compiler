
//----------------------------------------------------
// The following code was generated by CUP v0.10k TUM Edition 20050516
// Wed May 20 02:12:27 PDT 2015
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.Vector;

/** CUP v0.10k TUM Edition 20050516 generated parser.
  * @version Wed May 20 02:12:27 PDT 2015
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\301\000\002\123\002\000\002\003\004\000\002\002" +
    "\004\000\002\004\003\000\002\004\002\000\002\005\003" +
    "\000\002\005\004\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\124\002\000\002\011\010\000\002\125" +
    "\002\000\002\012\011\000\002\126\002\000\002\012\011" +
    "\000\002\127\002\000\002\013\012\000\002\054\003\000" +
    "\002\054\002\000\002\130\002\000\002\131\002\000\002" +
    "\132\002\000\002\014\015\000\002\017\003\000\002\017" +
    "\004\000\002\020\006\000\002\021\003\000\002\021\002" +
    "\000\002\022\003\000\002\022\004\000\002\023\003\000" +
    "\002\023\003\000\002\133\002\000\002\134\002\000\002" +
    "\015\013\000\002\135\002\000\002\016\012\000\002\024" +
    "\003\000\002\024\002\000\002\025\003\000\002\025\004" +
    "\000\002\026\003\000\002\136\002\000\002\137\002\000" +
    "\002\140\002\000\002\007\020\000\002\141\002\000\002" +
    "\142\002\000\002\010\015\000\002\107\003\000\002\107" +
    "\003\000\002\110\003\000\002\110\004\000\002\105\004" +
    "\000\002\104\003\000\002\104\003\000\002\104\003\000" +
    "\002\106\003\000\002\111\003\000\002\111\003\000\002" +
    "\050\003\000\002\050\002\000\002\051\003\000\002\051" +
    "\004\000\002\047\003\000\002\114\003\000\002\114\002" +
    "\000\002\115\003\000\002\115\004\000\002\062\005\000" +
    "\002\143\002\000\002\144\002\000\002\032\007\000\002" +
    "\027\003\000\002\027\002\000\002\030\003\000\002\030" +
    "\004\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\004\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\116\003" +
    "\000\002\116\002\000\002\117\003\000\002\117\005\000" +
    "\002\064\006\000\002\052\003\000\002\052\002\000\002" +
    "\063\004\000\002\063\002\000\002\112\003\000\002\112" +
    "\002\000\002\113\006\000\002\033\006\000\002\034\004" +
    "\000\002\034\002\000\002\145\002\000\002\036\006\000" +
    "\002\146\002\000\002\035\014\000\002\037\004\000\002" +
    "\040\004\000\002\041\007\000\002\042\004\000\002\042" +
    "\005\000\002\043\006\000\002\044\006\000\002\045\006" +
    "\000\002\046\005\000\002\122\003\000\002\122\005\000" +
    "\002\103\003\000\002\103\003\000\002\065\003\000\002" +
    "\120\003\000\002\120\002\000\002\121\003\000\002\121" +
    "\005\000\002\066\005\000\002\066\003\000\002\067\005" +
    "\000\002\067\003\000\002\070\005\000\002\070\003\000" +
    "\002\071\005\000\002\071\003\000\002\072\005\000\002" +
    "\072\003\000\002\073\005\000\002\073\003\000\002\074" +
    "\005\000\002\074\003\000\002\075\005\000\002\075\003" +
    "\000\002\076\005\000\002\076\003\000\002\077\005\000" +
    "\002\077\003\000\002\053\003\000\002\053\003\000\002" +
    "\055\003\000\002\055\003\000\002\055\003\000\002\055" +
    "\003\000\002\057\003\000\002\057\003\000\002\060\003" +
    "\000\002\060\003\000\002\060\003\000\002\056\003\000" +
    "\002\056\003\000\002\061\003\000\002\061\003\000\002" +
    "\100\004\000\002\100\004\000\002\100\004\000\002\100" +
    "\004\000\002\100\006\000\002\100\007\000\002\100\006" +
    "\000\002\100\004\000\002\100\003\000\002\101\005\000" +
    "\002\101\006\000\002\101\005\000\002\101\004\000\002" +
    "\101\006\000\002\101\003\000\002\102\005\000\002\102" +
    "\003\000\002\102\003\000\002\102\003\000\002\102\003" +
    "\000\002\102\003\000\002\102\003\000\002\102\003\000" +
    "\002\102\004\000\002\102\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0142\000\026\002\001\011\001\020\001\031\001\033" +
    "\001\035\001\041\001\073\001\074\001\105\001\001\002" +
    "\000\004\002\u0144\001\002\000\026\002\ufffd\011\uffeb\020" +
    "\uffeb\031\007\033\uffeb\035\011\041\uffeb\073\015\074\012" +
    "\105\uffeb\001\002\000\026\002\ufff6\011\ufff6\020\ufff6\031" +
    "\ufff6\033\ufff6\035\ufff6\041\ufff6\073\ufff6\074\ufff6\105\ufff6" +
    "\001\002\000\012\011\032\033\034\035\u0135\041\035\001" +
    "\002\000\026\002\ufff7\011\ufff7\020\ufff7\031\ufff7\033\ufff7" +
    "\035\ufff7\041\ufff7\073\ufff7\074\ufff7\105\ufff7\001\002\000" +
    "\004\015\u0126\001\002\000\004\105\245\001\002\000\014" +
    "\011\032\020\033\033\034\041\035\105\030\001\002\000" +
    "\026\002\ufff9\011\ufff9\020\ufff9\031\ufff9\033\ufff9\035\ufff9" +
    "\041\ufff9\073\ufff9\074\ufff9\105\ufff9\001\002\000\014\011" +
    "\uffec\020\uffec\033\uffec\041\uffec\105\uffec\001\002\000\026" +
    "\002\ufffc\011\ufffc\020\ufffc\031\ufffc\033\ufffc\035\ufffc\041" +
    "\ufffc\073\ufffc\074\ufffc\105\ufffc\001\002\000\026\002\ufff5" +
    "\011\ufff5\020\ufff5\031\ufff5\033\ufff5\035\ufff5\041\ufff5\073" +
    "\ufff5\074\ufff5\105\ufff5\001\002\000\026\002\ufffe\011\uffeb" +
    "\020\uffeb\031\007\033\uffeb\035\011\041\uffeb\073\015\074" +
    "\012\105\uffeb\001\002\000\026\002\ufffa\011\ufffa\020\ufffa" +
    "\031\ufffa\033\ufffa\035\ufffa\041\ufffa\073\ufffa\074\ufffa\105" +
    "\ufffa\001\002\000\004\002\000\001\002\000\026\002\ufff8" +
    "\011\ufff8\020\ufff8\031\ufff8\033\ufff8\035\ufff8\041\ufff8\073" +
    "\ufff8\074\ufff8\105\ufff8\001\002\000\026\002\ufffb\011\ufffb" +
    "\020\ufffb\031\ufffb\033\ufffb\035\ufffb\041\ufffb\073\ufffb\074" +
    "\ufffb\105\ufffb\001\002\000\012\004\uffca\044\uffca\066\uffca" +
    "\106\uffca\001\002\000\004\106\236\001\002\000\014\004" +
    "\uffc0\044\uffc0\066\uffc0\072\114\106\uffc0\001\002\000\014" +
    "\004\uffc4\044\uffc4\066\uffc4\072\uffc4\106\uffc4\001\002\000" +
    "\006\072\114\106\222\001\002\000\014\004\uffc5\044\uffc5" +
    "\066\uffc5\072\uffc5\106\uffc5\001\002\000\010\011\032\033" +
    "\034\041\035\001\002\000\014\004\uffc6\044\uffc6\066\uffc6" +
    "\072\uffc6\106\uffc6\001\002\000\014\004\uffc7\044\uffc7\066" +
    "\uffc7\072\uffc7\106\uffc7\001\002\000\004\106\037\001\002" +
    "\000\004\007\040\001\002\000\046\004\071\016\101\032" +
    "\064\045\073\050\065\051\074\055\061\056\100\061\076" +
    "\062\063\070\067\072\102\075\060\077\052\102\077\103" +
    "\062\104\044\106\070\001\002\000\060\004\uff69\005\uff69" +
    "\007\220\010\uff69\013\uff69\017\uff69\027\uff69\036\uff69\037" +
    "\uff69\043\uff69\046\uff69\047\uff69\050\uff69\052\uff69\054\uff69" +
    "\057\uff69\060\uff69\061\uff69\064\uff69\066\uff69\067\uff69\071" +
    "\uff69\072\uff69\001\002\000\056\004\uff6b\005\uff6b\010\uff6b" +
    "\013\uff6b\017\uff6b\027\uff6b\036\uff6b\037\uff6b\043\uff6b\046" +
    "\uff6b\047\uff6b\050\uff6b\052\172\054\uff6b\057\uff6b\060\uff6b" +
    "\061\uff6b\064\uff6b\066\uff6b\067\uff6b\071\174\072\173\001" +
    "\002\000\050\004\uff6d\005\uff6d\010\uff6d\013\uff6d\017\uff6d" +
    "\027\uff6d\036\uff6d\037\uff6d\043\uff6d\046\uff6d\047\uff6d\050" +
    "\166\054\uff6d\057\uff6d\060\uff6d\061\167\064\uff6d\066\uff6d" +
    "\067\uff6d\001\002\000\076\004\uff47\005\uff47\006\uff47\007" +
    "\uff47\010\uff47\013\uff47\015\uff47\017\uff47\024\uff47\027\uff47" +
    "\036\uff47\037\uff47\043\uff47\044\uff47\045\uff47\046\uff47\047" +
    "\uff47\050\uff47\051\uff47\052\uff47\054\uff47\057\uff47\060\uff47" +
    "\061\uff47\062\uff47\064\uff47\066\uff47\067\uff47\071\uff47\072" +
    "\uff47\001\002\000\044\004\uff6f\005\uff6f\010\uff6f\013\uff6f" +
    "\017\uff6f\027\uff6f\036\164\037\160\043\uff6f\046\162\047" +
    "\161\054\uff6f\057\uff6f\060\uff6f\064\uff6f\066\uff6f\067\uff6f" +
    "\001\002\000\076\004\uff4b\005\uff4b\006\uff4b\007\uff4b\010" +
    "\uff4b\013\uff4b\015\uff4b\017\uff4b\024\uff4b\027\uff4b\036\uff4b" +
    "\037\uff4b\043\uff4b\044\uff4b\045\uff4b\046\uff4b\047\uff4b\050" +
    "\uff4b\051\uff4b\052\uff4b\054\uff4b\057\uff4b\060\uff4b\061\uff4b" +
    "\062\uff4b\064\uff4b\066\uff4b\067\uff4b\071\uff4b\072\uff4b\001" +
    "\002\000\034\004\uff71\005\uff71\010\uff71\013\uff71\017\uff71" +
    "\027\156\043\uff71\054\155\057\uff71\060\uff71\064\uff71\066" +
    "\uff71\067\uff71\001\002\000\076\004\uff51\005\uff51\006\204" +
    "\007\uff51\010\uff51\013\uff51\015\uff51\017\uff51\024\205\027" +
    "\uff51\036\uff51\037\uff51\043\uff51\044\201\045\202\046\uff51" +
    "\047\uff51\050\uff51\051\074\052\uff51\054\uff51\057\uff51\060" +
    "\uff51\061\uff51\062\063\064\uff51\066\uff51\067\uff51\071\uff51" +
    "\072\uff51\001\002\000\030\004\152\005\uff73\010\uff73\013" +
    "\uff73\017\uff73\043\uff73\057\uff73\060\uff73\064\uff73\066\uff73" +
    "\067\uff73\001\002\000\076\004\uff46\005\uff46\006\uff46\007" +
    "\uff46\010\uff46\013\uff46\015\uff46\017\uff46\024\uff46\027\uff46" +
    "\036\uff46\037\uff46\043\uff46\044\uff46\045\uff46\046\uff46\047" +
    "\uff46\050\uff46\051\uff46\052\uff46\054\uff46\057\uff46\060\uff46" +
    "\061\uff46\062\uff46\064\uff46\066\uff46\067\uff46\071\uff46\072" +
    "\uff46\001\002\000\026\005\uff75\010\uff75\013\150\017\uff75" +
    "\043\uff75\057\uff75\060\uff75\064\uff75\066\uff75\067\uff75\001" +
    "\002\000\004\067\uffee\001\002\000\024\005\uff77\010\146" +
    "\017\uff77\043\uff77\057\uff77\060\uff77\064\uff77\066\uff77\067" +
    "\uff77\001\002\000\022\005\144\017\uff79\043\uff79\057\uff79" +
    "\060\uff79\064\uff79\066\uff79\067\uff79\001\002\000\020\017" +
    "\uff7b\043\uff7b\057\141\060\uff7b\064\uff7b\066\uff7b\067\uff7b" +
    "\001\002\000\076\004\uff43\005\uff43\006\uff43\007\uff43\010" +
    "\uff43\013\uff43\015\uff43\017\uff43\024\uff43\027\uff43\036\uff43" +
    "\037\uff43\043\uff43\044\uff43\045\uff43\046\uff43\047\uff43\050" +
    "\uff43\051\uff43\052\uff43\054\uff43\057\uff43\060\uff43\061\uff43" +
    "\062\uff43\064\uff43\066\uff43\067\uff43\071\uff43\072\uff43\001" +
    "\002\000\046\004\071\016\101\032\064\045\073\050\065" +
    "\051\074\055\061\056\100\061\076\062\063\070\067\072" +
    "\102\075\060\077\052\102\077\103\062\104\044\106\070" +
    "\001\002\000\076\004\uff49\005\uff49\006\uff49\007\uff49\010" +
    "\uff49\013\uff49\015\uff49\017\uff49\024\uff49\027\uff49\036\uff49" +
    "\037\uff49\043\uff49\044\uff49\045\uff49\046\uff49\047\uff49\050" +
    "\uff49\051\uff49\052\uff49\054\uff49\057\uff49\060\uff49\061\uff49" +
    "\062\uff49\064\uff49\066\uff49\067\uff49\071\uff49\072\uff49\001" +
    "\002\000\124\004\uff5b\005\uff5b\006\uff5b\007\uff5b\010\uff5b" +
    "\013\uff5b\015\uff5b\016\uff5b\017\uff5b\024\uff5b\027\uff5b\032" +
    "\uff5b\036\uff5b\037\uff5b\043\uff5b\044\uff5b\045\uff5b\046\uff5b" +
    "\047\uff5b\050\uff5b\051\uff5b\052\uff5b\054\uff5b\055\uff5b\056" +
    "\uff5b\057\uff5b\060\uff5b\061\uff5b\062\uff5b\064\uff5b\066\uff5b" +
    "\067\uff5b\070\uff5b\071\uff5b\072\uff5b\075\uff5b\077\uff5b\102" +
    "\uff5b\103\uff5b\104\uff5b\106\uff5b\001\002\000\076\004\uff45" +
    "\005\uff45\006\uff45\007\uff45\010\uff45\013\uff45\015\uff45\017" +
    "\uff45\024\uff45\027\uff45\036\uff45\037\uff45\043\uff45\044\uff45" +
    "\045\uff45\046\uff45\047\uff45\050\uff45\051\uff45\052\uff45\054" +
    "\uff45\057\uff45\060\uff45\061\uff45\062\uff45\064\uff45\066\uff45" +
    "\067\uff45\071\uff45\072\uff45\001\002\000\046\004\uff5d\016" +
    "\uff5d\032\uff5d\045\uff5d\050\uff5d\051\uff5d\055\uff5d\056\uff5d" +
    "\061\uff5d\062\uff5d\070\uff5d\072\uff5d\075\uff5d\077\uff5d\102" +
    "\uff5d\103\uff5d\104\uff5d\106\uff5d\001\002\000\006\064\uff81" +
    "\067\uff81\001\002\000\004\045\122\001\002\000\076\004" +
    "\uff41\005\uff41\006\uff41\007\uff41\010\uff41\013\uff41\015\uff41" +
    "\017\uff41\024\uff41\027\uff41\036\uff41\037\uff41\043\uff41\044" +
    "\uff41\045\uff41\046\uff41\047\uff41\050\uff41\051\uff41\052\uff41" +
    "\054\uff41\057\uff41\060\uff41\061\uff41\062\uff41\064\uff41\066" +
    "\uff41\067\uff41\071\uff41\072\uff41\001\002\000\046\004\071" +
    "\016\101\032\064\045\073\050\065\051\074\055\061\056" +
    "\100\061\076\062\063\070\067\072\102\075\060\077\052" +
    "\102\077\103\062\104\044\106\070\001\002\000\046\004" +
    "\071\016\101\032\064\045\073\050\065\051\074\055\061" +
    "\056\100\061\076\062\063\070\067\072\102\075\060\077" +
    "\052\102\077\103\062\104\044\106\070\001\002\000\056" +
    "\004\071\011\032\016\101\032\064\033\034\041\035\045" +
    "\073\050\065\051\074\055\061\056\100\061\076\062\063" +
    "\070\067\072\102\075\060\077\052\102\077\103\062\104" +
    "\044\105\030\106\070\001\002\000\124\004\uff5a\005\uff5a" +
    "\006\uff5a\007\uff5a\010\uff5a\013\uff5a\015\uff5a\016\uff5a\017" +
    "\uff5a\024\uff5a\027\uff5a\032\uff5a\036\uff5a\037\uff5a\043\uff5a" +
    "\044\uff5a\045\uff5a\046\uff5a\047\uff5a\050\uff5a\051\uff5a\052" +
    "\uff5a\054\uff5a\055\uff5a\056\uff5a\057\uff5a\060\uff5a\061\uff5a" +
    "\062\uff5a\064\uff5a\066\uff5a\067\uff5a\070\uff5a\071\uff5a\072" +
    "\uff5a\075\uff5a\077\uff5a\102\uff5a\103\uff5a\104\uff5a\106\uff5a" +
    "\001\002\000\046\004\071\016\101\032\064\045\073\050" +
    "\065\051\074\055\061\056\100\061\076\062\063\070\067" +
    "\072\102\075\060\077\052\102\077\103\062\104\044\106" +
    "\070\001\002\000\046\004\uff5c\016\uff5c\032\uff5c\045\uff5c" +
    "\050\uff5c\051\uff5c\055\uff5c\056\uff5c\061\uff5c\062\uff5c\070" +
    "\uff5c\072\uff5c\075\uff5c\077\uff5c\102\uff5c\103\uff5c\104\uff5c" +
    "\106\uff5c\001\002\000\076\004\uff48\005\uff48\006\uff48\007" +
    "\uff48\010\uff48\013\uff48\015\uff48\017\uff48\024\uff48\027\uff48" +
    "\036\uff48\037\uff48\043\uff48\044\uff48\045\uff48\046\uff48\047" +
    "\uff48\050\uff48\051\uff48\052\uff48\054\uff48\057\uff48\060\uff48" +
    "\061\uff48\062\uff48\064\uff48\066\uff48\067\uff48\071\uff48\072" +
    "\uff48\001\002\000\076\004\uff44\005\uff44\006\uff44\007\uff44" +
    "\010\uff44\013\uff44\015\uff44\017\uff44\024\uff44\027\uff44\036" +
    "\uff44\037\uff44\043\uff44\044\uff44\045\uff44\046\uff44\047\uff44" +
    "\050\uff44\051\uff44\052\uff44\054\uff44\057\uff44\060\uff44\061" +
    "\uff44\062\uff44\064\uff44\066\uff44\067\uff44\071\uff44\072\uff44" +
    "\001\002\000\004\106\104\001\002\000\046\004\071\016" +
    "\101\032\064\045\073\050\065\051\074\055\061\056\100" +
    "\061\076\062\063\070\067\072\102\075\060\077\052\102" +
    "\077\103\062\104\044\106\070\001\002\000\062\004\uff59" +
    "\005\uff59\007\uff59\010\uff59\013\uff59\015\uff59\017\uff59\027" +
    "\uff59\036\uff59\037\uff59\043\uff59\046\uff59\047\uff59\050\uff59" +
    "\052\uff59\054\uff59\057\uff59\060\uff59\061\uff59\064\uff59\066" +
    "\uff59\067\uff59\071\uff59\072\uff59\001\002\000\076\004\uff42" +
    "\005\uff42\006\uff42\007\uff42\010\uff42\013\uff42\015\uff42\017" +
    "\uff42\024\uff42\027\uff42\036\uff42\037\uff42\043\uff42\044\uff42" +
    "\045\uff42\046\uff42\047\uff42\050\uff42\051\uff42\052\uff42\054" +
    "\uff42\057\uff42\060\uff42\061\uff42\062\uff42\064\uff42\066\uff42" +
    "\067\uff42\071\uff42\072\uff42\001\002\000\062\004\uff57\005" +
    "\uff57\007\uff57\010\uff57\013\uff57\015\uff57\017\uff57\027\uff57" +
    "\036\uff57\037\uff57\043\uff57\046\uff57\047\uff57\050\uff57\052" +
    "\uff57\054\uff57\057\uff57\060\uff57\061\uff57\064\uff57\066\uff57" +
    "\067\uff57\071\uff57\072\uff57\001\002\000\004\072\114\001" +
    "\002\000\004\066\112\001\002\000\004\066\111\001\002" +
    "\000\076\004\uff4a\005\uff4a\006\uff4a\007\uff4a\010\uff4a\013" +
    "\uff4a\015\uff4a\017\uff4a\024\uff4a\027\uff4a\036\uff4a\037\uff4a" +
    "\043\uff4a\044\uff4a\045\uff4a\046\uff4a\047\uff4a\050\uff4a\051" +
    "\uff4a\052\uff4a\054\uff4a\057\uff4a\060\uff4a\061\uff4a\062\uff4a" +
    "\064\uff4a\066\uff4a\067\uff4a\071\uff4a\072\uff4a\001\002\000" +
    "\046\004\071\016\101\032\064\045\073\050\065\051\074" +
    "\055\061\056\100\061\076\062\063\070\067\072\102\075" +
    "\060\077\052\102\077\103\062\104\044\106\070\001\002" +
    "\000\062\004\uff53\005\uff53\007\uff53\010\uff53\013\uff53\015" +
    "\uff53\017\uff53\027\uff53\036\uff53\037\uff53\043\uff53\046\uff53" +
    "\047\uff53\050\uff53\052\uff53\054\uff53\057\uff53\060\uff53\061" +
    "\uff53\064\uff53\066\uff53\067\uff53\071\uff53\072\uff53\001\002" +
    "\000\014\004\uffbd\044\uffbd\066\uffbd\072\uffbd\106\uffbd\001" +
    "\002\000\014\004\uffc9\044\uffc9\066\uffc9\072\114\106\uffc9" +
    "\001\002\000\014\004\uffbf\044\uffbf\066\uffbf\072\uffbf\106" +
    "\uffbf\001\002\000\014\004\uffbe\044\uffbe\066\uffbe\072\uffbe" +
    "\106\uffbe\001\002\000\062\004\uff52\005\uff52\007\uff52\010" +
    "\uff52\013\uff52\015\uff52\017\uff52\027\uff52\036\uff52\037\uff52" +
    "\043\uff52\046\uff52\047\uff52\050\uff52\052\uff52\054\uff52\057" +
    "\uff52\060\uff52\061\uff52\064\uff52\066\uff52\067\uff52\071\uff52" +
    "\072\uff52\001\002\000\062\004\uff58\005\uff58\007\uff58\010" +
    "\uff58\013\uff58\015\uff58\017\uff58\027\uff58\036\uff58\037\uff58" +
    "\043\uff58\046\uff58\047\uff58\050\uff58\052\uff58\054\uff58\057" +
    "\uff58\060\uff58\061\uff58\064\uff58\066\uff58\067\uff58\071\uff58" +
    "\072\uff58\001\002\000\056\004\071\011\032\016\101\032" +
    "\064\033\034\041\035\045\073\050\065\051\074\055\061" +
    "\056\100\061\076\062\063\070\067\072\102\075\060\077" +
    "\052\102\077\103\062\104\044\105\030\106\070\001\002" +
    "\000\004\066\137\001\002\000\014\004\uffcb\044\uffcb\066" +
    "\uffcb\072\114\106\uffcb\001\002\000\006\044\131\066\uffbb" +
    "\001\002\000\012\004\uffcc\044\uffcc\066\uffcc\106\uffcc\001" +
    "\002\000\004\066\136\001\002\000\016\007\uffbc\015\uffbc" +
    "\017\uffbc\044\131\066\uffbc\067\uffbc\001\002\000\046\004" +
    "\071\016\101\032\064\045\073\050\065\051\074\055\061" +
    "\056\100\061\076\062\063\070\067\072\102\075\060\077" +
    "\052\102\077\103\062\104\044\106\070\001\002\000\016" +
    "\007\uffba\015\uffba\017\uffba\044\uffba\066\uffba\067\uffba\001" +
    "\002\000\004\064\134\001\002\000\016\007\uffb8\015\uffb8" +
    "\017\uffb8\044\uffb8\066\uffb8\067\uffb8\001\002\000\016\007" +
    "\uffb9\015\uffb9\017\uffb9\044\uffb9\066\uffb9\067\uffb9\001\002" +
    "\000\062\004\uff54\005\uff54\007\uff54\010\uff54\013\uff54\015" +
    "\uff54\017\uff54\027\uff54\036\uff54\037\uff54\043\uff54\046\uff54" +
    "\047\uff54\050\uff54\052\uff54\054\uff54\057\uff54\060\uff54\061" +
    "\uff54\064\uff54\066\uff54\067\uff54\071\uff54\072\uff54\001\002" +
    "\000\062\004\uff55\005\uff55\007\uff55\010\uff55\013\uff55\015" +
    "\uff55\017\uff55\027\uff55\036\uff55\037\uff55\043\uff55\046\uff55" +
    "\047\uff55\050\uff55\052\uff55\054\uff55\057\uff55\060\uff55\061" +
    "\uff55\064\uff55\066\uff55\067\uff55\071\uff55\072\uff55\001\002" +
    "\000\062\004\uff56\005\uff56\007\uff56\010\uff56\013\uff56\015" +
    "\uff56\017\uff56\027\uff56\036\uff56\037\uff56\043\uff56\046\uff56" +
    "\047\uff56\050\uff56\052\uff56\054\uff56\057\uff56\060\uff56\061" +
    "\uff56\064\uff56\066\uff56\067\uff56\071\uff56\072\uff56\001\002" +
    "\000\046\004\071\016\101\032\064\045\073\050\065\051" +
    "\074\055\061\056\100\061\076\062\063\070\067\072\102" +
    "\075\060\077\052\102\077\103\062\104\044\106\070\001" +
    "\002\000\056\004\uff69\005\uff69\010\uff69\013\uff69\017\uff69" +
    "\027\uff69\036\uff69\037\uff69\043\uff69\046\uff69\047\uff69\050" +
    "\uff69\052\uff69\054\uff69\057\uff69\060\uff69\061\uff69\064\uff69" +
    "\066\uff69\067\uff69\071\uff69\072\uff69\001\002\000\022\005" +
    "\144\017\uff7a\043\uff7a\057\uff7a\060\uff7a\064\uff7a\066\uff7a" +
    "\067\uff7a\001\002\000\046\004\071\016\101\032\064\045" +
    "\073\050\065\051\074\055\061\056\100\061\076\062\063" +
    "\070\067\072\102\075\060\077\052\102\077\103\062\104" +
    "\044\106\070\001\002\000\024\005\uff78\010\146\017\uff78" +
    "\043\uff78\057\uff78\060\uff78\064\uff78\066\uff78\067\uff78\001" +
    "\002\000\046\004\071\016\101\032\064\045\073\050\065" +
    "\051\074\055\061\056\100\061\076\062\063\070\067\072" +
    "\102\075\060\077\052\102\077\103\062\104\044\106\070" +
    "\001\002\000\026\005\uff76\010\uff76\013\150\017\uff76\043" +
    "\uff76\057\uff76\060\uff76\064\uff76\066\uff76\067\uff76\001\002" +
    "\000\046\004\071\016\101\032\064\045\073\050\065\051" +
    "\074\055\061\056\100\061\076\062\063\070\067\072\102" +
    "\075\060\077\052\102\077\103\062\104\044\106\070\001" +
    "\002\000\030\004\152\005\uff74\010\uff74\013\uff74\017\uff74" +
    "\043\uff74\057\uff74\060\uff74\064\uff74\066\uff74\067\uff74\001" +
    "\002\000\046\004\071\016\101\032\064\045\073\050\065" +
    "\051\074\055\061\056\100\061\076\062\063\070\067\072" +
    "\102\075\060\077\052\102\077\103\062\104\044\106\070" +
    "\001\002\000\034\004\uff72\005\uff72\010\uff72\013\uff72\017" +
    "\uff72\027\156\043\uff72\054\155\057\uff72\060\uff72\064\uff72" +
    "\066\uff72\067\uff72\001\002\000\046\004\071\016\101\032" +
    "\064\045\073\050\065\051\074\055\061\056\100\061\076" +
    "\062\063\070\067\072\102\075\060\077\052\102\077\103" +
    "\062\104\044\106\070\001\002\000\046\004\uff67\016\uff67" +
    "\032\uff67\045\uff67\050\uff67\051\uff67\055\uff67\056\uff67\061" +
    "\uff67\062\uff67\070\uff67\072\uff67\075\uff67\077\uff67\102\uff67" +
    "\103\uff67\104\uff67\106\uff67\001\002\000\046\004\uff68\016" +
    "\uff68\032\uff68\045\uff68\050\uff68\051\uff68\055\uff68\056\uff68" +
    "\061\uff68\062\uff68\070\uff68\072\uff68\075\uff68\077\uff68\102" +
    "\uff68\103\uff68\104\uff68\106\uff68\001\002\000\044\004\uff70" +
    "\005\uff70\010\uff70\013\uff70\017\uff70\027\uff70\036\164\037" +
    "\160\043\uff70\046\162\047\161\054\uff70\057\uff70\060\uff70" +
    "\064\uff70\066\uff70\067\uff70\001\002\000\046\004\uff63\016" +
    "\uff63\032\uff63\045\uff63\050\uff63\051\uff63\055\uff63\056\uff63" +
    "\061\uff63\062\uff63\070\uff63\072\uff63\075\uff63\077\uff63\102" +
    "\uff63\103\uff63\104\uff63\106\uff63\001\002\000\046\004\uff64" +
    "\016\uff64\032\uff64\045\uff64\050\uff64\051\uff64\055\uff64\056" +
    "\uff64\061\uff64\062\uff64\070\uff64\072\uff64\075\uff64\077\uff64" +
    "\102\uff64\103\uff64\104\uff64\106\uff64\001\002\000\046\004" +
    "\uff66\016\uff66\032\uff66\045\uff66\050\uff66\051\uff66\055\uff66" +
    "\056\uff66\061\uff66\062\uff66\070\uff66\072\uff66\075\uff66\077" +
    "\uff66\102\uff66\103\uff66\104\uff66\106\uff66\001\002\000\046" +
    "\004\071\016\101\032\064\045\073\050\065\051\074\055" +
    "\061\056\100\061\076\062\063\070\067\072\102\075\060" +
    "\077\052\102\077\103\062\104\044\106\070\001\002\000" +
    "\046\004\uff65\016\uff65\032\uff65\045\uff65\050\uff65\051\uff65" +
    "\055\uff65\056\uff65\061\uff65\062\uff65\070\uff65\072\uff65\075" +
    "\uff65\077\uff65\102\uff65\103\uff65\104\uff65\106\uff65\001\002" +
    "\000\050\004\uff6e\005\uff6e\010\uff6e\013\uff6e\017\uff6e\027" +
    "\uff6e\036\uff6e\037\uff6e\043\uff6e\046\uff6e\047\uff6e\050\166" +
    "\054\uff6e\057\uff6e\060\uff6e\061\167\064\uff6e\066\uff6e\067" +
    "\uff6e\001\002\000\046\004\uff61\016\uff61\032\uff61\045\uff61" +
    "\050\uff61\051\uff61\055\uff61\056\uff61\061\uff61\062\uff61\070" +
    "\uff61\072\uff61\075\uff61\077\uff61\102\uff61\103\uff61\104\uff61" +
    "\106\uff61\001\002\000\046\004\uff62\016\uff62\032\uff62\045" +
    "\uff62\050\uff62\051\uff62\055\uff62\056\uff62\061\uff62\062\uff62" +
    "\070\uff62\072\uff62\075\uff62\077\uff62\102\uff62\103\uff62\104" +
    "\uff62\106\uff62\001\002\000\046\004\071\016\101\032\064" +
    "\045\073\050\065\051\074\055\061\056\100\061\076\062" +
    "\063\070\067\072\102\075\060\077\052\102\077\103\062" +
    "\104\044\106\070\001\002\000\056\004\uff6c\005\uff6c\010" +
    "\uff6c\013\uff6c\017\uff6c\027\uff6c\036\uff6c\037\uff6c\043\uff6c" +
    "\046\uff6c\047\uff6c\050\uff6c\052\172\054\uff6c\057\uff6c\060" +
    "\uff6c\061\uff6c\064\uff6c\066\uff6c\067\uff6c\071\174\072\173" +
    "\001\002\000\046\004\uff5e\016\uff5e\032\uff5e\045\uff5e\050" +
    "\uff5e\051\uff5e\055\uff5e\056\uff5e\061\uff5e\062\uff5e\070\uff5e" +
    "\072\uff5e\075\uff5e\077\uff5e\102\uff5e\103\uff5e\104\uff5e\106" +
    "\uff5e\001\002\000\046\004\uff60\016\uff60\032\uff60\045\uff60" +
    "\050\uff60\051\uff60\055\uff60\056\uff60\061\uff60\062\uff60\070" +
    "\uff60\072\uff60\075\uff60\077\uff60\102\uff60\103\uff60\104\uff60" +
    "\106\uff60\001\002\000\046\004\uff5f\016\uff5f\032\uff5f\045" +
    "\uff5f\050\uff5f\051\uff5f\055\uff5f\056\uff5f\061\uff5f\062\uff5f" +
    "\070\uff5f\072\uff5f\075\uff5f\077\uff5f\102\uff5f\103\uff5f\104" +
    "\uff5f\106\uff5f\001\002\000\046\004\071\016\101\032\064" +
    "\045\073\050\065\051\074\055\061\056\100\061\076\062" +
    "\063\070\067\072\102\075\060\077\052\102\077\103\062" +
    "\104\044\106\070\001\002\000\056\004\uff6a\005\uff6a\010" +
    "\uff6a\013\uff6a\017\uff6a\027\uff6a\036\uff6a\037\uff6a\043\uff6a" +
    "\046\uff6a\047\uff6a\050\uff6a\052\uff6a\054\uff6a\057\uff6a\060" +
    "\uff6a\061\uff6a\064\uff6a\066\uff6a\067\uff6a\071\uff6a\072\uff6a" +
    "\001\002\000\004\067\200\001\002\000\124\002\uffed\004" +
    "\uffed\011\uffed\012\uffed\014\uffed\016\uffed\020\uffed\021\uffed" +
    "\022\uffed\023\uffed\030\uffed\031\uffed\032\uffed\033\uffed\034" +
    "\uffed\035\uffed\040\uffed\041\uffed\043\uffed\045\uffed\050\uffed" +
    "\051\uffed\053\uffed\055\uffed\056\uffed\061\uffed\062\uffed\063" +
    "\uffed\065\uffed\070\uffed\072\uffed\073\uffed\074\uffed\075\uffed" +
    "\077\uffed\100\uffed\102\uffed\103\uffed\104\uffed\105\uffed\106" +
    "\uffed\001\002\000\046\004\071\016\101\032\064\045\073" +
    "\050\065\051\074\055\061\056\100\061\076\062\063\070" +
    "\067\072\102\075\060\077\052\102\077\103\062\104\044" +
    "\106\070\001\002\000\050\004\071\016\101\032\064\045" +
    "\073\050\065\051\074\055\061\056\100\061\076\062\063" +
    "\066\uff7f\070\067\072\102\075\060\077\052\102\077\103" +
    "\062\104\044\106\070\001\002\000\076\004\uff4d\005\uff4d" +
    "\006\uff4d\007\uff4d\010\uff4d\013\uff4d\015\uff4d\017\uff4d\024" +
    "\uff4d\027\uff4d\036\uff4d\037\uff4d\043\uff4d\044\uff4d\045\uff4d" +
    "\046\uff4d\047\uff4d\050\uff4d\051\uff4d\052\uff4d\054\uff4d\057" +
    "\uff4d\060\uff4d\061\uff4d\062\uff4d\064\uff4d\066\uff4d\067\uff4d" +
    "\071\uff4d\072\uff4d\001\002\000\004\106\207\001\002\000" +
    "\004\106\206\001\002\000\076\004\uff50\005\uff50\006\uff50" +
    "\007\uff50\010\uff50\013\uff50\015\uff50\017\uff50\024\uff50\027" +
    "\uff50\036\uff50\037\uff50\043\uff50\044\uff50\045\uff50\046\uff50" +
    "\047\uff50\050\uff50\051\uff50\052\uff50\054\uff50\057\uff50\060" +
    "\uff50\061\uff50\062\uff50\064\uff50\066\uff50\067\uff50\071\uff50" +
    "\072\uff50\001\002\000\076\004\uff4e\005\uff4e\006\uff4e\007" +
    "\uff4e\010\uff4e\013\uff4e\015\uff4e\017\uff4e\024\uff4e\027\uff4e" +
    "\036\uff4e\037\uff4e\043\uff4e\044\uff4e\045\uff4e\046\uff4e\047" +
    "\uff4e\050\uff4e\051\uff4e\052\uff4e\054\uff4e\057\uff4e\060\uff4e" +
    "\061\uff4e\062\uff4e\064\uff4e\066\uff4e\067\uff4e\071\uff4e\072" +
    "\uff4e\001\002\000\006\017\uff7e\066\uff7e\001\002\000\006" +
    "\017\214\066\uff80\001\002\000\004\066\213\001\002\000" +
    "\076\004\uff4c\005\uff4c\006\uff4c\007\uff4c\010\uff4c\013\uff4c" +
    "\015\uff4c\017\uff4c\024\uff4c\027\uff4c\036\uff4c\037\uff4c\043" +
    "\uff4c\044\uff4c\045\uff4c\046\uff4c\047\uff4c\050\uff4c\051\uff4c" +
    "\052\uff4c\054\uff4c\057\uff4c\060\uff4c\061\uff4c\062\uff4c\064" +
    "\uff4c\066\uff4c\067\uff4c\071\uff4c\072\uff4c\001\002\000\046" +
    "\004\071\016\101\032\064\045\073\050\065\051\074\055" +
    "\061\056\100\061\076\062\063\070\067\072\102\075\060" +
    "\077\052\102\077\103\062\104\044\106\070\001\002\000" +
    "\006\017\uff7d\066\uff7d\001\002\000\004\064\217\001\002" +
    "\000\076\004\uff4f\005\uff4f\006\uff4f\007\uff4f\010\uff4f\013" +
    "\uff4f\015\uff4f\017\uff4f\024\uff4f\027\uff4f\036\uff4f\037\uff4f" +
    "\043\uff4f\044\uff4f\045\uff4f\046\uff4f\047\uff4f\050\uff4f\051" +
    "\uff4f\052\uff4f\054\uff4f\057\uff4f\060\uff4f\061\uff4f\062\uff4f" +
    "\064\uff4f\066\uff4f\067\uff4f\071\uff4f\072\uff4f\001\002\000" +
    "\046\004\071\016\101\032\064\045\073\050\065\051\074" +
    "\055\061\056\100\061\076\062\063\070\067\072\102\075" +
    "\060\077\052\102\077\103\062\104\044\106\070\001\002" +
    "\000\016\017\uff7c\043\uff7c\060\uff7c\064\uff7c\066\uff7c\067" +
    "\uff7c\001\002\000\010\015\uffbb\044\131\067\uffbb\001\002" +
    "\000\006\015\224\067\uff97\001\002\000\004\045\231\001" +
    "\002\000\004\067\uff98\001\002\000\004\067\ufff0\001\002" +
    "\000\004\067\230\001\002\000\124\002\uffef\004\uffef\011" +
    "\uffef\012\uffef\014\uffef\016\uffef\020\uffef\021\uffef\022\uffef" +
    "\023\uffef\030\uffef\031\uffef\032\uffef\033\uffef\034\uffef\035" +
    "\uffef\040\uffef\041\uffef\043\uffef\045\uffef\050\uffef\051\uffef" +
    "\053\uffef\055\uffef\056\uffef\061\uffef\062\uffef\063\uffef\065" +
    "\uffef\070\uffef\072\uffef\073\uffef\074\uffef\075\uffef\077\uffef" +
    "\100\uffef\102\uffef\103\uffef\104\uffef\105\uffef\106\uffef\001" +
    "\002\000\050\004\071\016\101\032\064\045\073\050\065" +
    "\051\074\055\061\056\100\061\076\062\063\066\uff7f\070" +
    "\067\072\102\075\060\077\052\102\077\103\062\104\044" +
    "\106\070\001\002\000\004\066\233\001\002\000\004\067" +
    "\uff96\001\002\000\012\004\uffc8\044\uffc8\066\uffc8\106\uffc8" +
    "\001\002\000\014\004\uffc1\044\uffc1\066\uffc1\072\114\106" +
    "\uffc1\001\002\000\010\007\uffbb\044\131\067\uffbb\001\002" +
    "\000\006\007\241\067\uff99\001\002\000\004\067\ufff2\001" +
    "\002\000\046\004\071\016\101\032\064\045\073\050\065" +
    "\051\074\055\061\056\100\061\076\062\063\070\067\072" +
    "\102\075\060\077\052\102\077\103\062\104\044\106\070" +
    "\001\002\000\004\067\uff9a\001\002\000\004\067\244\001" +
    "\002\000\124\002\ufff1\004\ufff1\011\ufff1\012\ufff1\014\ufff1" +
    "\016\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\030\ufff1\031" +
    "\ufff1\032\ufff1\033\ufff1\034\ufff1\035\ufff1\040\ufff1\041\ufff1" +
    "\043\ufff1\045\ufff1\050\ufff1\051\ufff1\053\ufff1\055\ufff1\056" +
    "\ufff1\061\ufff1\062\ufff1\063\ufff1\065\ufff1\070\ufff1\072\ufff1" +
    "\073\ufff1\074\ufff1\075\ufff1\077\ufff1\100\ufff1\102\ufff1\103" +
    "\ufff1\104\ufff1\105\ufff1\106\ufff1\001\002\000\004\043\246" +
    "\001\002\000\012\011\uffea\033\uffea\041\uffea\105\uffea\001" +
    "\002\000\012\011\032\033\034\041\035\105\030\001\002" +
    "\000\020\011\032\033\034\035\uffe2\041\035\063\uffe2\076" +
    "\257\105\261\001\002\000\004\106\253\001\002\000\020" +
    "\011\uffe6\033\uffe6\035\uffe6\041\uffe6\063\uffe6\076\uffe6\105" +
    "\uffe6\001\002\000\006\044\131\067\uffbb\001\002\000\004" +
    "\067\255\001\002\000\020\011\uffe4\033\uffe4\035\uffe4\041" +
    "\uffe4\063\uffe4\076\uffe4\105\uffe4\001\002\000\012\035\uffde" +
    "\063\uffde\076\uffde\105\uffde\001\002\000\004\105\u011f\001" +
    "\002\000\020\011\uffe5\033\uffe5\035\uffe5\041\uffe5\063\uffe5" +
    "\076\uffe5\105\uffe5\001\002\000\006\045\uffdd\072\uffc4\001" +
    "\002\000\012\035\uffe3\063\uffe3\076\257\105\277\001\002" +
    "\000\012\035\uffe1\063\uffe1\076\uffe1\105\uffe1\001\002\000" +
    "\012\035\uffdf\063\uffdf\076\uffdf\105\uffdf\001\002\000\006" +
    "\035\uffe9\063\uffe9\001\002\000\006\035\011\063\uffd7\001" +
    "\002\000\006\035\uffd6\063\uffd6\001\002\000\006\035\011" +
    "\063\uffd8\001\002\000\006\035\uffd4\063\uffd4\001\002\000" +
    "\004\063\uffe8\001\002\000\004\063\274\001\002\000\004" +
    "\067\275\001\002\000\026\002\uffe7\011\uffe7\020\uffe7\031" +
    "\uffe7\033\uffe7\035\uffe7\041\uffe7\073\uffe7\074\uffe7\105\uffe7" +
    "\001\002\000\006\035\uffd5\063\uffd5\001\002\000\004\045" +
    "\uffdd\001\002\000\012\035\uffe0\063\uffe0\076\uffe0\105\uffe0" +
    "\001\002\000\004\045\302\001\002\000\014\011\032\033" +
    "\034\041\035\066\uffa0\105\030\001\002\000\006\004\357" +
    "\106\uff9b\001\002\000\006\017\u011a\066\uffa1\001\002\000" +
    "\006\017\uff9f\066\uff9f\001\002\000\004\066\307\001\002" +
    "\000\004\043\uffdc\001\002\000\004\043\311\001\002\000" +
    "\114\004\071\011\uffeb\012\341\014\331\016\101\020\uffeb" +
    "\021\317\022\315\023\316\030\335\032\064\033\uffeb\034" +
    "\343\040\346\041\uffeb\043\324\045\073\050\065\051\074" +
    "\053\325\055\061\056\100\061\076\062\063\063\uffb3\065" +
    "\321\070\067\072\102\073\015\075\060\077\052\100\314" +
    "\102\077\103\062\104\044\105\uffeb\106\070\001\002\000" +
    "\114\004\uffa6\011\uffa6\012\uffa6\014\uffa6\016\uffa6\020\uffa6" +
    "\021\uffa6\022\uffa6\023\uffa6\030\uffa6\032\uffa6\033\uffa6\034" +
    "\uffa6\040\uffa6\041\uffa6\043\uffa6\045\uffa6\050\uffa6\051\uffa6" +
    "\053\uffa6\055\uffa6\056\uffa6\061\uffa6\062\uffa6\063\uffa6\065" +
    "\uffa6\070\uffa6\072\uffa6\073\uffa6\075\uffa6\077\uffa6\100\uffa6" +
    "\102\uffa6\103\uffa6\104\uffa6\105\uffa6\106\uffa6\001\002\000" +
    "\114\004\uffa7\011\uffa7\012\uffa7\014\uffa7\016\uffa7\020\uffa7" +
    "\021\uffa7\022\uffa7\023\uffa7\030\uffa7\032\uffa7\033\uffa7\034" +
    "\uffa7\040\uffa7\041\uffa7\043\uffa7\045\uffa7\050\uffa7\051\uffa7" +
    "\053\uffa7\055\uffa7\056\uffa7\061\uffa7\062\uffa7\063\uffa7\065" +
    "\uffa7\070\uffa7\072\uffa7\073\uffa7\075\uffa7\077\uffa7\100\uffa7" +
    "\102\uffa7\103\uffa7\104\uffa7\105\uffa7\106\uffa7\001\002\000" +
    "\046\004\071\016\101\032\064\045\073\050\065\051\074" +
    "\055\061\056\100\061\076\062\063\070\067\072\102\075" +
    "\060\077\052\102\077\103\062\104\044\106\070\001\002" +
    "\000\004\060\u010f\001\002\000\046\004\071\016\101\032" +
    "\064\045\073\050\065\051\074\055\061\056\100\061\076" +
    "\062\063\070\067\072\102\075\060\077\052\102\077\103" +
    "\062\104\044\106\070\001\002\000\004\067\u010c\001\002" +
    "\000\114\004\uffa5\011\uffa5\012\uffa5\014\uffa5\016\uffa5\020" +
    "\uffa5\021\uffa5\022\uffa5\023\uffa5\030\uffa5\032\uffa5\033\uffa5" +
    "\034\uffa5\040\uffa5\041\uffa5\043\uffa5\045\uffa5\050\uffa5\051" +
    "\uffa5\053\uffa5\055\uffa5\056\uffa5\061\uffa5\062\uffa5\063\uffa5" +
    "\065\uffa5\070\uffa5\072\uffa5\073\uffa5\075\uffa5\077\uffa5\100" +
    "\uffa5\102\uffa5\103\uffa5\104\uffa5\105\uffa5\106\uffa5\001\002" +
    "\000\050\004\071\016\101\032\064\045\073\050\065\051" +
    "\074\055\061\056\100\061\076\062\063\067\u010a\070\067" +
    "\072\102\075\060\077\052\102\077\103\062\104\044\106" +
    "\070\001\002\000\114\004\uffa4\011\uffa4\012\uffa4\014\uffa4" +
    "\016\uffa4\020\uffa4\021\uffa4\022\uffa4\023\uffa4\030\uffa4\032" +
    "\uffa4\033\uffa4\034\uffa4\040\uffa4\041\uffa4\043\uffa4\045\uffa4" +
    "\050\uffa4\051\uffa4\053\uffa4\055\uffa4\056\uffa4\061\uffa4\062" +
    "\uffa4\063\uffa4\065\uffa4\070\uffa4\072\uffa4\073\uffa4\075\uffa4" +
    "\077\uffa4\100\uffa4\102\uffa4\103\uffa4\104\uffa4\105\uffa4\106" +
    "\uffa4\001\002\000\114\004\uffab\011\uffab\012\uffab\014\uffab" +
    "\016\uffab\020\uffab\021\uffab\022\uffab\023\uffab\030\uffab\032" +
    "\uffab\033\uffab\034\uffab\040\uffab\041\uffab\043\uffab\045\uffab" +
    "\050\uffab\051\uffab\053\uffab\055\uffab\056\uffab\061\uffab\062" +
    "\uffab\063\uffab\065\uffab\070\uffab\072\uffab\073\uffab\075\uffab" +
    "\077\uffab\100\uffab\102\uffab\103\uffab\104\uffab\105\uffab\106" +
    "\uffab\001\002\000\114\004\uffb7\011\uffb7\012\uffb7\014\uffb7" +
    "\016\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7\030\uffb7\032" +
    "\uffb7\033\uffb7\034\uffb7\040\uffb7\041\uffb7\043\uffb7\045\uffb7" +
    "\050\uffb7\051\uffb7\053\uffb7\055\uffb7\056\uffb7\061\uffb7\062" +
    "\uffb7\063\uffb7\065\uffb7\070\uffb7\072\uffb7\073\uffb7\075\uffb7" +
    "\077\uffb7\100\uffb7\102\uffb7\103\uffb7\104\uffb7\105\uffb7\106" +
    "\uffb7\001\002\000\046\004\071\016\101\032\064\045\073" +
    "\050\065\051\074\055\061\056\100\061\076\062\063\070" +
    "\067\072\102\075\060\077\052\102\077\103\062\104\044" +
    "\106\070\001\002\000\114\004\071\011\uffeb\012\341\014" +
    "\331\016\101\020\uffeb\021\317\022\315\023\316\030\335" +
    "\032\064\033\uffeb\034\343\040\346\041\uffeb\043\324\045" +
    "\073\050\065\051\074\053\325\055\061\056\100\061\076" +
    "\062\063\063\uffb4\065\321\070\067\072\102\073\015\075" +
    "\060\077\052\100\314\102\077\103\062\104\044\105\uffeb" +
    "\106\070\001\002\000\114\004\uffa3\011\uffa3\012\uffa3\014" +
    "\uffa3\016\uffa3\020\uffa3\021\uffa3\022\uffa3\023\uffa3\030\uffa3" +
    "\032\uffa3\033\uffa3\034\uffa3\040\uffa3\041\uffa3\043\uffa3\045" +
    "\uffa3\050\uffa3\051\uffa3\053\uffa3\055\uffa3\056\uffa3\061\uffa3" +
    "\062\uffa3\063\uffa3\065\uffa3\070\uffa3\072\uffa3\073\uffa3\075" +
    "\uffa3\077\uffa3\100\uffa3\102\uffa3\103\uffa3\104\uffa3\105\uffa3" +
    "\106\uffa3\001\002\000\114\004\uffae\011\uffae\012\uffae\014" +
    "\uffae\016\uffae\020\uffae\021\uffae\022\uffae\023\uffae\030\uffae" +
    "\032\uffae\033\uffae\034\uffae\040\uffae\041\uffae\043\uffae\045" +
    "\uffae\050\uffae\051\uffae\053\uffae\055\uffae\056\uffae\061\uffae" +
    "\062\uffae\063\uffae\065\uffae\070\uffae\072\uffae\073\uffae\075" +
    "\uffae\077\uffae\100\uffae\102\uffae\103\uffae\104\uffae\105\uffae" +
    "\106\uffae\001\002\000\004\042\376\001\002\000\114\004" +
    "\uffac\011\uffac\012\uffac\014\uffac\016\uffac\020\uffac\021\uffac" +
    "\022\uffac\023\uffac\030\uffac\032\uffac\033\uffac\034\uffac\040" +
    "\uffac\041\uffac\043\uffac\045\uffac\050\uffac\051\uffac\053\uffac" +
    "\055\uffac\056\uffac\061\uffac\062\uffac\063\uffac\065\uffac\070" +
    "\uffac\072\uffac\073\uffac\075\uffac\077\uffac\100\uffac\102\uffac" +
    "\103\uffac\104\uffac\105\uffac\106\uffac\001\002\000\004\067" +
    "\375\001\002\000\004\063\374\001\002\000\004\045\370" +
    "\001\002\000\114\004\uffaa\011\uffaa\012\uffaa\014\uffaa\016" +
    "\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa\030\uffaa\032\uffaa" +
    "\033\uffaa\034\uffaa\040\uffaa\041\uffaa\043\uffaa\045\uffaa\050" +
    "\uffaa\051\uffaa\053\uffaa\055\uffaa\056\uffaa\061\uffaa\062\uffaa" +
    "\063\uffaa\065\uffaa\070\uffaa\072\uffaa\073\uffaa\075\uffaa\077" +
    "\uffaa\100\uffaa\102\uffaa\103\uffaa\104\uffaa\105\uffaa\106\uffaa" +
    "\001\002\000\114\004\uffb0\011\uffb0\012\uffb0\014\uffb0\016" +
    "\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0\030\uffb0\032\uffb0" +
    "\033\uffb0\034\uffb0\040\uffb0\041\uffb0\043\uffb0\045\uffb0\050" +
    "\uffb0\051\uffb0\053\uffb0\055\uffb0\056\uffb0\061\uffb0\062\uffb0" +
    "\063\uffb0\065\uffb0\070\uffb0\072\uffb0\073\uffb0\075\uffb0\077" +
    "\uffb0\100\uffb0\102\uffb0\103\uffb0\104\uffb0\105\uffb0\106\uffb0" +
    "\001\002\000\114\004\uffb2\011\uffb2\012\uffb2\014\uffb2\016" +
    "\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2\030\uffb2\032\uffb2" +
    "\033\uffb2\034\uffb2\040\uffb2\041\uffb2\043\uffb2\045\uffb2\050" +
    "\uffb2\051\uffb2\053\uffb2\055\uffb2\056\uffb2\061\uffb2\062\uffb2" +
    "\063\uffb2\065\uffb2\070\uffb2\072\uffb2\073\uffb2\075\uffb2\077" +
    "\uffb2\100\uffb2\102\uffb2\103\uffb2\104\uffb2\105\uffb2\106\uffb2" +
    "\001\002\000\004\067\367\001\002\000\114\004\uffaf\011" +
    "\uffaf\012\uffaf\014\uffaf\016\uffaf\020\uffaf\021\uffaf\022\uffaf" +
    "\023\uffaf\030\uffaf\032\uffaf\033\uffaf\034\uffaf\040\uffaf\041" +
    "\uffaf\043\uffaf\045\uffaf\050\uffaf\051\uffaf\053\uffaf\055\uffaf" +
    "\056\uffaf\061\uffaf\062\uffaf\063\uffaf\065\uffaf\070\uffaf\072" +
    "\uffaf\073\uffaf\075\uffaf\077\uffaf\100\uffaf\102\uffaf\103\uffaf" +
    "\104\uffaf\105\uffaf\106\uffaf\001\002\000\004\045\355\001" +
    "\002\000\114\004\uffa8\011\uffa8\012\uffa8\014\uffa8\016\uffa8" +
    "\020\uffa8\021\uffa8\022\uffa8\023\uffa8\030\uffa8\032\uffa8\033" +
    "\uffa8\034\uffa8\040\uffa8\041\uffa8\043\uffa8\045\uffa8\050\uffa8" +
    "\051\uffa8\053\uffa8\055\uffa8\056\uffa8\061\uffa8\062\uffa8\063" +
    "\uffa8\065\uffa8\070\uffa8\072\uffa8\073\uffa8\075\uffa8\077\uffa8" +
    "\100\uffa8\102\uffa8\103\uffa8\104\uffa8\105\uffa8\106\uffa8\001" +
    "\002\000\114\004\uffa2\011\uffa2\012\uffa2\014\uffa2\016\uffa2" +
    "\020\uffa2\021\uffa2\022\uffa2\023\uffa2\030\uffa2\032\uffa2\033" +
    "\uffa2\034\uffa2\040\uffa2\041\uffa2\043\uffa2\045\uffa2\050\uffa2" +
    "\051\uffa2\053\uffa2\055\uffa2\056\uffa2\061\uffa2\062\uffa2\063" +
    "\uffa2\065\uffa2\070\uffa2\072\uffa2\073\uffa2\075\uffa2\077\uffa2" +
    "\100\uffa2\102\uffa2\103\uffa2\104\uffa2\105\uffa2\106\uffa2\001" +
    "\002\000\046\004\071\016\101\032\064\045\073\050\065" +
    "\051\074\055\061\056\100\061\076\062\063\070\067\072" +
    "\102\075\060\077\052\102\077\103\062\104\044\106\070" +
    "\001\002\000\114\004\uffa9\011\uffa9\012\uffa9\014\uffa9\016" +
    "\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9\030\uffa9\032\uffa9" +
    "\033\uffa9\034\uffa9\040\uffa9\041\uffa9\043\uffa9\045\uffa9\050" +
    "\uffa9\051\uffa9\053\uffa9\055\uffa9\056\uffa9\061\uffa9\062\uffa9" +
    "\063\uffa9\065\uffa9\070\uffa9\072\uffa9\073\uffa9\075\uffa9\077" +
    "\uffa9\100\uffa9\102\uffa9\103\uffa9\104\uffa9\105\uffa9\106\uffa9" +
    "\001\002\000\004\043\324\001\002\000\116\004\uff93\011" +
    "\uff93\012\uff93\014\uff93\016\uff93\020\uff93\021\uff93\022\uff93" +
    "\023\uff93\025\353\030\uff93\032\uff93\033\uff93\034\uff93\040" +
    "\uff93\041\uff93\043\uff93\045\uff93\050\uff93\051\uff93\053\uff93" +
    "\055\uff93\056\uff93\061\uff93\062\uff93\063\uff93\065\uff93\070" +
    "\uff93\072\uff93\073\uff93\075\uff93\077\uff93\100\uff93\102\uff93" +
    "\103\uff93\104\uff93\105\uff93\106\uff93\001\002\000\114\004" +
    "\uff95\011\uff95\012\uff95\014\uff95\016\uff95\020\uff95\021\uff95" +
    "\022\uff95\023\uff95\030\uff95\032\uff95\033\uff95\034\uff95\040" +
    "\uff95\041\uff95\043\uff95\045\uff95\050\uff95\051\uff95\053\uff95" +
    "\055\uff95\056\uff95\061\uff95\062\uff95\063\uff95\065\uff95\070" +
    "\uff95\072\uff95\073\uff95\075\uff95\077\uff95\100\uff95\102\uff95" +
    "\103\uff95\104\uff95\105\uff95\106\uff95\001\002\000\004\043" +
    "\324\001\002\000\114\004\uff94\011\uff94\012\uff94\014\uff94" +
    "\016\uff94\020\uff94\021\uff94\022\uff94\023\uff94\030\uff94\032" +
    "\uff94\033\uff94\034\uff94\040\uff94\041\uff94\043\uff94\045\uff94" +
    "\050\uff94\051\uff94\053\uff94\055\uff94\056\uff94\061\uff94\062" +
    "\uff94\063\uff94\065\uff94\070\uff94\072\uff94\073\uff94\075\uff94" +
    "\077\uff94\100\uff94\102\uff94\103\uff94\104\uff94\105\uff94\106" +
    "\uff94\001\002\000\012\011\032\033\034\041\035\105\030" +
    "\001\002\000\006\004\357\106\uff9b\001\002\000\004\106" +
    "\uff9c\001\002\000\004\106\361\001\002\000\004\015\362" +
    "\001\002\000\046\004\071\016\101\032\064\045\073\050" +
    "\065\051\074\055\061\056\100\061\076\062\063\070\067" +
    "\072\102\075\060\077\052\102\077\103\062\104\044\106" +
    "\070\001\002\000\004\066\364\001\002\000\004\043\uff90" +
    "\001\002\000\004\043\324\001\002\000\114\004\uff8f\011" +
    "\uff8f\012\uff8f\014\uff8f\016\uff8f\020\uff8f\021\uff8f\022\uff8f" +
    "\023\uff8f\030\uff8f\032\uff8f\033\uff8f\034\uff8f\040\uff8f\041" +
    "\uff8f\043\uff8f\045\uff8f\050\uff8f\051\uff8f\053\uff8f\055\uff8f" +
    "\056\uff8f\061\uff8f\062\uff8f\063\uff8f\065\uff8f\070\uff8f\072" +
    "\uff8f\073\uff8f\075\uff8f\077\uff8f\100\uff8f\102\uff8f\103\uff8f" +
    "\104\uff8f\105\uff8f\106\uff8f\001\002\000\114\004\uff8e\011" +
    "\uff8e\012\uff8e\014\uff8e\016\uff8e\020\uff8e\021\uff8e\022\uff8e" +
    "\023\uff8e\030\uff8e\032\uff8e\033\uff8e\034\uff8e\040\uff8e\041" +
    "\uff8e\043\uff8e\045\uff8e\050\uff8e\051\uff8e\053\uff8e\055\uff8e" +
    "\056\uff8e\061\uff8e\062\uff8e\063\uff8e\065\uff8e\070\uff8e\072" +
    "\uff8e\073\uff8e\075\uff8e\077\uff8e\100\uff8e\102\uff8e\103\uff8e" +
    "\104\uff8e\105\uff8e\106\uff8e\001\002\000\046\004\071\016" +
    "\101\032\064\045\073\050\065\051\074\055\061\056\100" +
    "\061\076\062\063\070\067\072\102\075\060\077\052\102" +
    "\077\103\062\104\044\106\070\001\002\000\004\066\372" +
    "\001\002\000\004\067\373\001\002\000\114\004\uff8c\011" +
    "\uff8c\012\uff8c\014\uff8c\016\uff8c\020\uff8c\021\uff8c\022\uff8c" +
    "\023\uff8c\030\uff8c\032\uff8c\033\uff8c\034\uff8c\040\uff8c\041" +
    "\uff8c\043\uff8c\045\uff8c\050\uff8c\051\uff8c\053\uff8c\055\uff8c" +
    "\056\uff8c\061\uff8c\062\uff8c\063\uff8c\065\uff8c\070\uff8c\072" +
    "\uff8c\073\uff8c\075\uff8c\077\uff8c\100\uff8c\102\uff8c\103\uff8c" +
    "\104\uff8c\105\uff8c\106\uff8c\001\002\000\012\035\uffdb\063" +
    "\uffdb\076\uffdb\105\uffdb\001\002\000\114\004\uffad\011\uffad" +
    "\012\uffad\014\uffad\016\uffad\020\uffad\021\uffad\022\uffad\023" +
    "\uffad\030\uffad\032\uffad\033\uffad\034\uffad\040\uffad\041\uffad" +
    "\043\uffad\045\uffad\050\uffad\051\uffad\053\uffad\055\uffad\056" +
    "\uffad\061\uffad\062\uffad\063\uffad\065\uffad\070\uffad\072\uffad" +
    "\073\uffad\075\uffad\077\uffad\100\uffad\102\uffad\103\uffad\104" +
    "\uffad\105\uffad\106\uffad\001\002\000\046\004\071\016\101" +
    "\032\064\045\073\050\065\051\074\055\061\056\100\061" +
    "\076\062\063\070\067\072\102\075\060\077\052\102\077" +
    "\103\062\104\044\106\070\001\002\000\004\067\u0100\001" +
    "\002\000\114\004\uff89\011\uff89\012\uff89\014\uff89\016\uff89" +
    "\020\uff89\021\uff89\022\uff89\023\uff89\030\uff89\032\uff89\033" +
    "\uff89\034\uff89\040\uff89\041\uff89\043\uff89\045\uff89\050\uff89" +
    "\051\uff89\053\uff89\055\uff89\056\uff89\061\uff89\062\uff89\063" +
    "\uff89\065\uff89\070\uff89\072\uff89\073\uff89\075\uff89\077\uff89" +
    "\100\uff89\102\uff89\103\uff89\104\uff89\105\uff89\106\uff89\001" +
    "\002\000\114\004\uffb1\011\uffb1\012\uffb1\014\uffb1\016\uffb1" +
    "\020\uffb1\021\uffb1\022\uffb1\023\uffb1\030\uffb1\032\uffb1\033" +
    "\uffb1\034\uffb1\040\uffb1\041\uffb1\043\uffb1\045\uffb1\050\uffb1" +
    "\051\uffb1\053\uffb1\055\uffb1\056\uffb1\061\uffb1\062\uffb1\063" +
    "\uffb1\065\uffb1\070\uffb1\072\uffb1\073\uffb1\075\uffb1\077\uffb1" +
    "\100\uffb1\102\uffb1\103\uffb1\104\uffb1\105\uffb1\106\uffb1\001" +
    "\002\000\006\015\224\067\uff97\001\002\000\004\067\u0104" +
    "\001\002\000\114\004\uff87\011\uff87\012\uff87\014\uff87\016" +
    "\uff87\020\uff87\021\uff87\022\uff87\023\uff87\030\uff87\032\uff87" +
    "\033\uff87\034\uff87\040\uff87\041\uff87\043\uff87\045\uff87\050" +
    "\uff87\051\uff87\053\uff87\055\uff87\056\uff87\061\uff87\062\uff87" +
    "\063\uff87\065\uff87\070\uff87\072\uff87\073\uff87\075\uff87\077" +
    "\uff87\100\uff87\102\uff87\103\uff87\104\uff87\105\uff87\106\uff87" +
    "\001\002\000\114\004\071\011\uffeb\012\341\014\331\016" +
    "\101\020\uffeb\021\317\022\315\023\316\030\335\032\064" +
    "\033\uffeb\034\343\040\346\041\uffeb\043\324\045\073\050" +
    "\065\051\074\053\325\055\061\056\100\061\076\062\063" +
    "\063\uffb3\065\321\070\067\072\102\073\015\075\060\077" +
    "\052\100\314\102\077\103\062\104\044\105\uffeb\106\070" +
    "\001\002\000\004\063\uffb6\001\002\000\004\063\u0108\001" +
    "\002\000\116\004\uffb5\011\uffb5\012\uffb5\014\uffb5\016\uffb5" +
    "\020\uffb5\021\uffb5\022\uffb5\023\uffb5\025\uffb5\030\uffb5\032" +
    "\uffb5\033\uffb5\034\uffb5\040\uffb5\041\uffb5\043\uffb5\045\uffb5" +
    "\050\uffb5\051\uffb5\053\uffb5\055\uffb5\056\uffb5\061\uffb5\062" +
    "\uffb5\063\uffb5\065\uffb5\070\uffb5\072\uffb5\073\uffb5\075\uffb5" +
    "\077\uffb5\100\uffb5\102\uffb5\103\uffb5\104\uffb5\105\uffb5\106" +
    "\uffb5\001\002\000\004\067\u010b\001\002\000\114\004\uff8b" +
    "\011\uff8b\012\uff8b\014\uff8b\016\uff8b\020\uff8b\021\uff8b\022" +
    "\uff8b\023\uff8b\030\uff8b\032\uff8b\033\uff8b\034\uff8b\040\uff8b" +
    "\041\uff8b\043\uff8b\045\uff8b\050\uff8b\051\uff8b\053\uff8b\055" +
    "\uff8b\056\uff8b\061\uff8b\062\uff8b\063\uff8b\065\uff8b\070\uff8b" +
    "\072\uff8b\073\uff8b\075\uff8b\077\uff8b\100\uff8b\102\uff8b\103" +
    "\uff8b\104\uff8b\105\uff8b\106\uff8b\001\002\000\114\004\uff8a" +
    "\011\uff8a\012\uff8a\014\uff8a\016\uff8a\020\uff8a\021\uff8a\022" +
    "\uff8a\023\uff8a\030\uff8a\032\uff8a\033\uff8a\034\uff8a\040\uff8a" +
    "\041\uff8a\043\uff8a\045\uff8a\050\uff8a\051\uff8a\053\uff8a\055" +
    "\uff8a\056\uff8a\061\uff8a\062\uff8a\063\uff8a\065\uff8a\070\uff8a" +
    "\072\uff8a\073\uff8a\075\uff8a\077\uff8a\100\uff8a\102\uff8a\103" +
    "\uff8a\104\uff8a\105\uff8a\106\uff8a\001\002\000\114\004\uff8d" +
    "\011\uff8d\012\uff8d\014\uff8d\016\uff8d\020\uff8d\021\uff8d\022" +
    "\uff8d\023\uff8d\030\uff8d\032\uff8d\033\uff8d\034\uff8d\040\uff8d" +
    "\041\uff8d\043\uff8d\045\uff8d\050\uff8d\051\uff8d\053\uff8d\055" +
    "\uff8d\056\uff8d\061\uff8d\062\uff8d\063\uff8d\065\uff8d\070\uff8d" +
    "\072\uff8d\073\uff8d\075\uff8d\077\uff8d\100\uff8d\102\uff8d\103" +
    "\uff8d\104\uff8d\105\uff8d\106\uff8d\001\002\000\004\067\u010e" +
    "\001\002\000\114\004\uff86\011\uff86\012\uff86\014\uff86\016" +
    "\uff86\020\uff86\021\uff86\022\uff86\023\uff86\030\uff86\032\uff86" +
    "\033\uff86\034\uff86\040\uff86\041\uff86\043\uff86\045\uff86\050" +
    "\uff86\051\uff86\053\uff86\055\uff86\056\uff86\061\uff86\062\uff86" +
    "\063\uff86\065\uff86\070\uff86\072\uff86\073\uff86\075\uff86\077" +
    "\uff86\100\uff86\102\uff86\103\uff86\104\uff86\105\uff86\106\uff86" +
    "\001\002\000\050\004\071\016\101\026\u0112\032\064\045" +
    "\073\050\065\051\074\055\061\056\100\061\076\062\063" +
    "\070\067\072\102\075\060\077\052\102\077\103\062\104" +
    "\044\106\070\001\002\000\006\060\u0114\067\u0115\001\002" +
    "\000\006\060\uff85\067\uff85\001\002\000\006\060\uff82\067" +
    "\uff82\001\002\000\006\060\uff83\067\uff83\001\002\000\050" +
    "\004\071\016\101\026\u0112\032\064\045\073\050\065\051" +
    "\074\055\061\056\100\061\076\062\063\070\067\072\102" +
    "\075\060\077\052\102\077\103\062\104\044\106\070\001" +
    "\002\000\114\004\uff88\011\uff88\012\uff88\014\uff88\016\uff88" +
    "\020\uff88\021\uff88\022\uff88\023\uff88\030\uff88\032\uff88\033" +
    "\uff88\034\uff88\040\uff88\041\uff88\043\uff88\045\uff88\050\uff88" +
    "\051\uff88\053\uff88\055\uff88\056\uff88\061\uff88\062\uff88\063" +
    "\uff88\065\uff88\070\uff88\072\uff88\073\uff88\075\uff88\077\uff88" +
    "\100\uff88\102\uff88\103\uff88\104\uff88\105\uff88\106\uff88\001" +
    "\002\000\006\060\uff84\067\uff84\001\002\000\004\043\uff92" +
    "\001\002\000\004\043\324\001\002\000\114\004\uff91\011" +
    "\uff91\012\uff91\014\uff91\016\uff91\020\uff91\021\uff91\022\uff91" +
    "\023\uff91\030\uff91\032\uff91\033\uff91\034\uff91\040\uff91\041" +
    "\uff91\043\uff91\045\uff91\050\uff91\051\uff91\053\uff91\055\uff91" +
    "\056\uff91\061\uff91\062\uff91\063\uff91\065\uff91\070\uff91\072" +
    "\uff91\073\uff91\075\uff91\077\uff91\100\uff91\102\uff91\103\uff91" +
    "\104\uff91\105\uff91\106\uff91\001\002\000\012\011\032\033" +
    "\034\041\035\105\030\001\002\000\006\017\uff9e\066\uff9e" +
    "\001\002\000\004\106\u011d\001\002\000\010\017\uffbb\044" +
    "\131\066\uffbb\001\002\000\006\017\uff9d\066\uff9d\001\002" +
    "\000\004\045\uffda\001\002\000\004\045\u0121\001\002\000" +
    "\004\066\u0122\001\002\000\004\043\u0123\001\002\000\114" +
    "\004\071\011\uffeb\012\341\014\331\016\101\020\uffeb\021" +
    "\317\022\315\023\316\030\335\032\064\033\uffeb\034\343" +
    "\040\346\041\uffeb\043\324\045\073\050\065\051\074\053" +
    "\325\055\061\056\100\061\076\062\063\063\uffb3\065\321" +
    "\070\067\072\102\073\015\075\060\077\052\100\314\102" +
    "\077\103\062\104\044\105\uffeb\106\070\001\002\000\004" +
    "\063\u0125\001\002\000\012\035\uffd9\063\uffd9\076\uffd9\105" +
    "\uffd9\001\002\000\014\011\032\033\034\041\035\101\u0129" +
    "\105\030\001\002\000\006\004\uffc3\106\uffc3\001\002\000" +
    "\006\004\357\106\uff9b\001\002\000\006\004\uffc2\106\uffc2" +
    "\001\002\000\004\106\u012b\001\002\000\004\045\uffd3\001" +
    "\002\000\004\045\u012d\001\002\000\014\011\032\033\034" +
    "\041\035\066\uffa0\105\030\001\002\000\004\066\u012f\001" +
    "\002\000\004\043\uffd2\001\002\000\004\043\u0131\001\002" +
    "\000\114\004\071\011\uffeb\012\341\014\331\016\101\020" +
    "\uffeb\021\317\022\315\023\316\030\335\032\064\033\uffeb" +
    "\034\343\040\346\041\uffeb\043\324\045\073\050\065\051" +
    "\074\053\325\055\061\056\100\061\076\062\063\063\uffb3" +
    "\065\321\070\067\072\102\073\015\075\060\077\052\100" +
    "\314\102\077\103\062\104\044\105\uffeb\106\070\001\002" +
    "\000\004\063\uffd1\001\002\000\004\063\u0134\001\002\000" +
    "\030\002\uffd0\011\uffd0\020\uffd0\031\uffd0\033\uffd0\035\uffd0" +
    "\041\uffd0\063\uffd0\073\uffd0\074\uffd0\105\uffd0\001\002\000" +
    "\004\015\u013b\001\002\000\004\106\u0137\001\002\000\006" +
    "\044\131\067\uffbb\001\002\000\004\067\ufff4\001\002\000" +
    "\004\067\u013a\001\002\000\026\002\ufff3\011\ufff3\020\ufff3" +
    "\031\ufff3\033\ufff3\035\ufff3\041\ufff3\073\ufff3\074\ufff3\105" +
    "\ufff3\001\002\000\014\011\032\033\034\041\035\101\u0129" +
    "\105\030\001\002\000\004\106\u013d\001\002\000\004\045" +
    "\uffcf\001\002\000\004\045\u013f\001\002\000\014\011\032" +
    "\033\034\041\035\066\uffa0\105\030\001\002\000\004\066" +
    "\u0141\001\002\000\004\067\uffce\001\002\000\004\067\u0143" +
    "\001\002\000\026\002\uffcd\011\uffcd\020\uffcd\031\uffcd\033" +
    "\uffcd\035\uffcd\041\uffcd\073\uffcd\074\uffcd\105\uffcd\001\002" +
    "\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0142\000\006\003\003\123\004\001\001\000\002\001" +
    "\001\000\026\004\021\005\017\006\015\007\016\010\005" +
    "\011\020\012\013\013\022\014\007\054\012\001\001\000" +
    "\002\001\001\000\006\104\026\105\u0135\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\104" +
    "\026\105\024\106\030\110\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\006\023\007\016\010\005\011\020\012\013\013\022" +
    "\014\007\054\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\047\115\050\233\051\234\001" +
    "\001\000\002\001\001\000\006\047\115\051\114\001\001" +
    "\000\002\001\001\000\004\104\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\056\074\061\071\065\053\066\065\067\056\070" +
    "\055\071\054\072\052\073\050\074\046\075\044\076\042" +
    "\077\041\100\040\101\047\102\045\001\001\000\002\001" +
    "\001\000\004\060\174\001\001\000\004\057\167\001\001" +
    "\000\002\001\001\000\004\055\162\001\001\000\002\001" +
    "\001\000\004\053\153\001\001\000\004\061\202\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\127\176\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\056\074\061" +
    "\071\100\137\101\047\102\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\056\074\061\071\100\120\101\047\102\045\001\001\000" +
    "\014\056\074\061\071\100\117\101\047\102\045\001\001" +
    "\000\050\056\074\061\071\066\107\067\056\070\055\071" +
    "\054\072\052\073\050\074\046\075\044\076\042\077\041" +
    "\100\040\101\047\102\045\104\026\105\024\106\105\110" +
    "\106\001\001\000\002\001\001\000\014\056\074\061\071" +
    "\100\104\101\047\102\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\056\074\061\071\100\102\101\047\102\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\047\115\051\114\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\056\074\061\071\100\112" +
    "\101\047\102\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\047\116\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\056" +
    "\074\061\071\100\122\101\047\102\045\104\026\105\024" +
    "\106\123\107\124\110\125\001\001\000\002\001\001\000" +
    "\006\047\115\051\114\001\001\000\010\062\131\114\126" +
    "\115\127\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\062\134\001\001\000\042\056\074\061\071\065\132" +
    "\066\065\067\056\070\055\071\054\072\052\073\050\074" +
    "\046\075\044\076\042\077\041\100\040\101\047\102\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\056\074\061\071\070\142\071" +
    "\054\072\052\073\050\074\046\075\044\076\042\077\041" +
    "\100\141\101\047\102\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\056\074\061\071\071\144\072\052" +
    "\073\050\074\046\075\044\076\042\077\041\100\141\101" +
    "\047\102\045\001\001\000\002\001\001\000\030\056\074" +
    "\061\071\072\146\073\050\074\046\075\044\076\042\077" +
    "\041\100\141\101\047\102\045\001\001\000\002\001\001" +
    "\000\026\056\074\061\071\073\150\074\046\075\044\076" +
    "\042\077\041\100\141\101\047\102\045\001\001\000\002" +
    "\001\001\000\024\056\074\061\071\074\152\075\044\076" +
    "\042\077\041\100\141\101\047\102\045\001\001\000\004" +
    "\053\153\001\001\000\022\056\074\061\071\075\156\076" +
    "\042\077\041\100\141\101\047\102\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\055\162\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\056\074\061\071\076\164\077\041\100\141\101\047\102" +
    "\045\001\001\000\002\001\001\000\004\057\167\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\056\074\061" +
    "\071\077\170\100\141\101\047\102\045\001\001\000\004" +
    "\060\174\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\056\074\061\071\100\175\101\047" +
    "\102\045\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\056\074\061\071\066\215\067\056" +
    "\070\055\071\054\072\052\073\050\074\046\075\044\076" +
    "\042\077\041\100\040\101\047\102\045\001\001\000\044" +
    "\056\074\061\071\066\207\067\056\070\055\071\054\072" +
    "\052\073\050\074\046\075\044\076\042\077\041\100\040" +
    "\101\047\102\045\120\211\121\210\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\056\074\061\071" +
    "\066\214\067\056\070\055\071\054\072\052\073\050\074" +
    "\046\075\044\076\042\077\041\100\040\101\047\102\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\056\074\061\071\066\220\067\056\070\055" +
    "\071\054\072\052\073\050\074\046\075\044\076\042\077" +
    "\041\100\040\101\047\102\045\001\001\000\002\001\001" +
    "\000\010\062\131\114\222\115\127\001\001\000\006\112" +
    "\225\113\224\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\126\226\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\056\074\061\071\066\207\067\056\070\055" +
    "\071\054\072\052\073\050\074\046\075\044\076\042\077" +
    "\041\100\040\101\047\102\045\120\231\121\210\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\047\116\001\001\000\010\062\131\114\236\115\127" +
    "\001\001\000\004\063\237\001\001\000\004\125\242\001" +
    "\001\000\040\056\074\061\071\066\241\067\056\070\055" +
    "\071\054\072\052\073\050\074\046\075\044\076\042\077" +
    "\041\100\040\101\047\102\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\130\246\001\001\000\016\017\247\020\251\104\026" +
    "\105\024\106\105\110\250\001\001\000\026\015\263\016" +
    "\255\020\257\021\264\022\261\023\262\104\026\105\024" +
    "\106\105\110\250\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\062\131\114\253\115\127\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\133\300\001\001\000\010" +
    "\015\263\016\255\023\277\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\131\265\001\001\000\012\007\270" +
    "\024\271\025\267\026\266\001\001\000\002\001\001\000" +
    "\006\007\270\026\275\001\001\000\002\001\001\000\004" +
    "\132\272\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\133\300\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\064\304\104" +
    "\026\105\024\106\123\107\302\110\125\116\305\117\303" +
    "\001\001\000\004\052\u011b\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\134\307\001\001" +
    "\000\002\001\001\000\104\012\336\013\341\027\333\030" +
    "\325\031\337\032\327\033\331\035\335\036\322\037\346" +
    "\040\343\041\312\042\311\043\317\044\321\045\326\046" +
    "\344\054\012\056\074\061\071\066\332\067\056\070\055" +
    "\071\054\072\052\073\050\074\046\075\044\076\042\077" +
    "\041\100\040\101\047\102\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\056\074\061\071\066\u0116\067" +
    "\056\070\055\071\054\072\052\073\050\074\046\075\044" +
    "\076\042\077\041\100\040\101\047\102\045\001\001\000" +
    "\002\001\001\000\014\056\074\061\071\100\u010c\101\047" +
    "\102\045\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\056\074\061\071\066\u0108\067\056\070\055\071\054" +
    "\072\052\073\050\074\046\075\044\076\042\077\041\100" +
    "\040\101\047\102\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\143\u0104\001\001\000\014\056\074\061" +
    "\071\100\u0101\101\047\102\045\001\001\000\100\012\336" +
    "\013\341\031\u0100\032\327\033\331\035\335\036\322\037" +
    "\346\040\343\041\312\042\311\043\317\044\321\045\326" +
    "\046\344\054\012\056\074\061\071\066\332\067\056\070" +
    "\055\071\054\072\052\073\050\074\046\075\044\076\042" +
    "\077\041\100\040\101\047\102\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\056\074\061\071\066\347" +
    "\067\056\070\055\071\054\072\052\073\050\074\046\075" +
    "\044\076\042\077\041\100\040\101\047\102\045\001\001" +
    "\000\002\001\001\000\004\032\350\001\001\000\004\034" +
    "\351\001\001\000\002\001\001\000\004\032\353\001\001" +
    "\000\002\001\001\000\014\104\026\105\024\106\123\107" +
    "\355\110\125\001\001\000\004\052\357\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\056" +
    "\074\061\071\066\362\067\056\070\055\071\054\072\052" +
    "\073\050\074\046\075\044\076\042\077\041\100\040\101" +
    "\047\102\045\001\001\000\002\001\001\000\004\146\364" +
    "\001\001\000\004\032\365\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\056\074\061\071\066\370\067\056" +
    "\070\055\071\054\072\052\073\050\074\046\075\044\076" +
    "\042\077\041\100\040\101\047\102\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\056\074\061\071\100\376" +
    "\101\047\102\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\112\u0102\113\224\001\001" +
    "\000\002\001\001\000\002\001\001\000\104\012\336\013" +
    "\341\027\u0105\030\325\031\337\032\327\033\331\035\335" +
    "\036\322\037\346\040\343\041\312\042\311\043\317\044" +
    "\321\045\326\046\344\054\012\056\074\061\071\066\332" +
    "\067\056\070\055\071\054\072\052\073\050\074\046\075" +
    "\044\076\042\077\041\100\040\101\047\102\045\001\001" +
    "\000\004\144\u0106\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\056\074\061\071\066\u0112\067\056\070\055\071\054" +
    "\072\052\073\050\074\046\075\044\076\042\077\041\100" +
    "\040\101\047\102\045\103\u0110\122\u010f\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\056\074\061\071\066\u0112\067\056\070\055" +
    "\071\054\072\052\073\050\074\046\075\044\076\042\077" +
    "\041\100\040\101\047\102\045\103\u0115\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\145\u0117\001\001\000" +
    "\004\032\u0118\001\001\000\002\001\001\000\016\064\u011a" +
    "\104\026\105\024\106\123\107\302\110\125\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\062\131\114\u011d" +
    "\115\127\001\001\000\002\001\001\000\004\135\u011f\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\104\012\336\013\341\027\u0123\030\325\031\337\032" +
    "\327\033\331\035\335\036\322\037\346\040\343\041\312" +
    "\042\311\043\317\044\321\045\326\046\344\054\012\056" +
    "\074\061\071\066\332\067\056\070\055\071\054\072\052" +
    "\073\050\074\046\075\044\076\042\077\041\100\040\101" +
    "\047\102\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\104\026\105\024\106\123\107\u0126\110\125\111" +
    "\u0127\001\001\000\002\001\001\000\004\052\u0129\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\136\u012b\001" +
    "\001\000\002\001\001\000\022\064\304\104\026\105\024" +
    "\106\123\107\302\110\125\116\u012d\117\303\001\001\000" +
    "\002\001\001\000\004\137\u012f\001\001\000\002\001\001" +
    "\000\104\012\336\013\341\027\u0131\030\325\031\337\032" +
    "\327\033\331\035\335\036\322\037\346\040\343\041\312" +
    "\042\311\043\317\044\321\045\326\046\344\054\012\056" +
    "\074\061\071\066\332\067\056\070\055\071\054\072\052" +
    "\073\050\074\046\075\044\076\042\077\041\100\040\101" +
    "\047\102\045\001\001\000\004\140\u0132\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\062\131\114\u0137\115\127\001\001\000\004" +
    "\124\u0138\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\104\026\105\024\106\123\107\u0126\110\125\111\u013b" +
    "\001\001\000\002\001\001\000\004\141\u013d\001\001\000" +
    "\002\001\001\000\022\064\304\104\026\105\024\106\123" +
    "\107\302\110\125\116\u013f\117\303\001\001\000\002\001" +
    "\001\000\004\142\u0141\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return new Symbol (sym.EOF); 
    }



}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // Designator3 ::= T_ID 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoDesignator3_ID (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(64/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // Designator3 ::= T_COLONCOLON T_ID 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoDesignator3_GlobalID (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(64/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // Designator3 ::= T_THIS 
            {
              STO RESULT = null;
		
                        RESULT = ((MyParser) parser).DoDesignator3_this();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(64/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // Designator3 ::= T_NULLPTR 
            {
              STO RESULT = null;
		
                        RESULT = new ExprSTO ("nullptr", PointerType.getNullPtrBuiltinType());
                    
              CUP$parser$result = new java_cup.runtime.Symbol(64/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // Designator3 ::= T_FALSE 
            {
              STO RESULT = null;
		
                        RESULT = new ConstSTO ("false", BoolType.getBuiltinType(), false);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(64/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // Designator3 ::= T_TRUE 
            {
              STO RESULT = null;
		
                        RESULT = new ConstSTO ("true", BoolType.getBuiltinType(), true);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(64/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // Designator3 ::= T_STR_LITERAL 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new ConstSTO (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(64/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // Designator3 ::= T_FLOAT_LITERAL 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new ConstSTO (_1, FloatType.getBuiltinType(), Double.parseDouble(_1));
                    
              CUP$parser$result = new java_cup.runtime.Symbol(64/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // Designator3 ::= T_INT_LITERAL 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new ConstSTO (_1, IntType.getBuiltinType(), Integer.decode(_1));
                    
              CUP$parser$result = new java_cup.runtime.Symbol(64/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // Designator3 ::= T_LPAREN Expr T_RPAREN 
            {
              STO RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = _2;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(64/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // Designator2 ::= Designator3 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(63/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // Designator2 ::= Designator2 T_LPAREN OptExprList T_RPAREN 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _2 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = ((MyParser) parser).DoFuncCall (_1, _2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(63/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // Designator2 ::= Designator2 IncDecOp 
            {
              STO RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoIncDecNumericExpr (_1, _2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(63/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // Designator2 ::= Designator2 T_ARROW T_ID 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoDesignator_Arrow(_1, _2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(63/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // Designator2 ::= Designator2 T_LBRACKET Expr T_RBRACKET 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = ((MyParser) parser).DoDesignator2_Array (_1, _2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(63/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // Designator2 ::= Designator2 T_DOT T_ID 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoDesignator2_Dot (_1, _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(63/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // Designator ::= Designator2 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(62/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // Designator ::= IncDecOp Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoIncDecNumericExpr (_1, _2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(62/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // Designator ::= T_LPAREN DecoratedType T_RPAREN Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoTypeCast(_1, _2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(62/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // Designator ::= T_SIZEOF T_LPAREN Type OptArrayList T_RPAREN 
            {
              STO RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _3 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = ((MyParser) parser).DoSizeof(_2, _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(62/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // Designator ::= T_SIZEOF T_LPAREN Designator T_RPAREN 
            {
              STO RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = ((MyParser) parser).DoSizeof(_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(62/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // Designator ::= T_NOT Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoUnaryLogicExpr ("!", _1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(62/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // Designator ::= UnarySign Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoUnaryNumericExpr(_1, _2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(62/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // Designator ::= T_AMPERSAND Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoDesignator_Ampersand(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(62/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // Designator ::= T_STAR Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoDesignator_Star(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(62/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // IncDecOp ::= T_MINUSMINUS 
            {
              String RESULT = null;
		
                        RESULT = "--";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(47/*IncDecOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // IncDecOp ::= T_PLUSPLUS 
            {
              String RESULT = null;
		
                        RESULT = "++";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(47/*IncDecOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // UnarySign ::= T_PLUS 
            {
              String RESULT = null;
		
                        RESULT = "+";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(44/*UnarySign*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // UnarySign ::= T_MINUS 
            {
              String RESULT = null;
		
                        RESULT = "-";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(44/*UnarySign*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // MulOp ::= T_MOD 
            {
              String RESULT = null;
		
                        RESULT = "%";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(46/*MulOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // MulOp ::= T_SLASH 
            {
              String RESULT = null;
		
                        RESULT = "/";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(46/*MulOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // MulOp ::= T_STAR 
            {
              String RESULT = null;
		
                        RESULT = "*";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(46/*MulOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // AddOp ::= T_MINUS 
            {
              String RESULT = null;
		
                        RESULT = "-";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(45/*AddOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // AddOp ::= T_PLUS 
            {
              String RESULT = null;
		
                        RESULT = "+";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(45/*AddOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // RelationOp ::= T_GTE 
            {
              String RESULT = null;
		
                        RESULT = ">=";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(43/*RelationOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // RelationOp ::= T_LTE 
            {
              String RESULT = null;
		
                        RESULT = "<=";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(43/*RelationOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // RelationOp ::= T_GT 
            {
              String RESULT = null;
		
                        RESULT = ">";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(43/*RelationOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // RelationOp ::= T_LT 
            {
              String RESULT = null;
		
                        RESULT = "<";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(43/*RelationOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // EqualityOp ::= T_NEQ 
            {
              String RESULT = null;
		
                        RESULT = "!=";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(41/*EqualityOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // EqualityOp ::= T_EQU 
            {
              String RESULT = null;
		
                        RESULT = "==";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(41/*EqualityOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // Expr8 ::= Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(61/*Expr8*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // Expr8 ::= Expr8 MulOp Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoBinaryNumericExpr (_1, _2, _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(61/*Expr8*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // Expr7 ::= Expr8 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(60/*Expr7*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // Expr7 ::= Expr7 AddOp Expr8 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoBinaryNumericExpr (_1, _2, _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(60/*Expr7*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // Expr6 ::= Expr7 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(59/*Expr6*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // Expr6 ::= Expr6 RelationOp Expr7 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoBinaryNumericRelationExpr (_1, _2, _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(59/*Expr6*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // Expr5 ::= Expr6 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(58/*Expr5*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // Expr5 ::= Expr5 EqualityOp Expr6 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoBinaryEqExpr (_1, _2, _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(58/*Expr5*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // Expr4 ::= Expr5 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(57/*Expr4*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // Expr4 ::= Expr4 T_AMPERSAND Expr5 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoBinaryIntExpr (_1, "&", _2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(57/*Expr4*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // Expr3 ::= Expr4 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(56/*Expr3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // Expr3 ::= Expr3 T_CARET Expr4 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoBinaryIntExpr (_1, "^", _2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(56/*Expr3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // Expr2 ::= Expr3 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(55/*Expr2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // Expr2 ::= Expr2 T_BAR Expr3 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoBinaryIntExpr (_1, "|", _2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(55/*Expr2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // Expr1 ::= Expr2 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(54/*Expr1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // Expr1 ::= Expr1 T_AND Expr2 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoBinaryLogicExpr (_1, "&&", _2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(54/*Expr1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // Expr0 ::= Expr1 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(53/*Expr0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // Expr0 ::= Expr0 T_OR Expr1 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoBinaryLogicExpr (_1, "||", _2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(53/*Expr0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // Expr ::= Expr0 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(52/*Expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // Expr ::= Designator T_ASSIGN Expr 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoAssignExpr (_1, _2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(52/*Expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // ExprList ::= ExprList T_COMMA Expr 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                        RESULT.addElement (_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(79/*ExprList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // ExprList ::= Expr 
            {
              Vector RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new Vector ();
                        RESULT.addElement (_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(79/*ExprList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // OptExprList ::= 
            {
              Vector RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(78/*OptExprList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // OptExprList ::= ExprList 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(78/*OptExprList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // ConstExpr ::= Expr 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                    	//System.out.println(_1);
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(51/*ConstExpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // WritePair ::= T_ENDL 
            {
              STO RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(65/*WritePair*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // WritePair ::= Expr 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
						RESULT = _1;
					
              CUP$parser$result = new java_cup.runtime.Symbol(65/*WritePair*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // WritePairList ::= WritePairList T_OSTREAM WritePair 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                        RESULT.addElement (_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(80/*WritePairList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // WritePairList ::= WritePair 
            {
              Vector RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new Vector ();
                        RESULT.addElement (_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(80/*WritePairList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // DeleteStmt ::= T_DELETE Designator T_SEMI 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        ((MyParser) parser).DoDeleteCheck(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(36/*DeleteStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // NewStmt ::= T_NEW Designator OptCtorCall T_SEMI 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _2 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        ((MyParser) parser).DoNewCheck(_1, _2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(35/*NewStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // WriteStmt ::= T_COUT T_OSTREAM WritePairList T_SEMI 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
						((MyParser) parser).PrintCOutAssembly(_1);
					
              CUP$parser$result = new java_cup.runtime.Symbol(34/*WriteStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ReadStmt ::= T_CIN T_ISTREAM Designator T_SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(33/*ReadStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ReturnStmt ::= T_RETURN Expr T_SEMI 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        ((MyParser) parser).DoReturnCheck(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(32/*ReturnStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ReturnStmt ::= T_RETURN T_SEMI 
            {
              Object RESULT = null;
		
                        ((MyParser) parser).DoReturnCheck(null);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(32/*ReturnStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ExitStmt ::= T_EXIT T_LPAREN Expr T_RPAREN T_SEMI 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        ((MyParser) parser).DoExitCheck(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(31/*ExitStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ContinueStmt ::= T_CONTINUE T_SEMI 
            {
              Object RESULT = null;
		
                        ((MyParser) parser).DoCheckIfInsideLoop(ErrorMsg.error12_Continue);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(30/*ContinueStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // BreakStmt ::= T_BREAK T_SEMI 
            {
              Object RESULT = null;
		
                        ((MyParser) parser).DoCheckIfInsideLoop(ErrorMsg.error12_Break);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(29/*BreakStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ForeachStmt ::= T_FOREACH T_LPAREN Type OptRef T_ID T_COLON Expr T_RPAREN NT$19 CodeBlock 
            {
              Object RESULT = null;
              // propagate RESULT from NT$19
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Boolean _2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		STO _4 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                        ((MyParser) parser).DoBlockClose();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(27/*ForeachStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // NT$19 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Boolean _2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _4 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                        ((MyParser) parser).DoBlockOpen(true);
                        ((MyParser) parser).DoForeachCheck (_1, _2, _3, _4);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(100/*NT$19*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // WhileStmt ::= T_WHILE Expr NT$18 CodeBlock 
            {
              Object RESULT = null;
              // propagate RESULT from NT$18
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        ((MyParser) parser).DoBlockClose();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(28/*WhileStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // NT$18 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).DoBoolLogicCheck (_1);
                        ((MyParser) parser).DoBlockOpen(true);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(99/*NT$18*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // OptElse ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(26/*OptElse*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // OptElse ::= T_ELSE CodeBlock 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(26/*OptElse*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // IfStmt ::= T_IF Expr CodeBlock OptElse 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        ((MyParser) parser).DoBoolLogicCheck (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(25/*IfStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // CtorCall ::= T_COLON T_LPAREN OptExprList T_RPAREN 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(73/*CtorCall*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // OptCtorCall ::= 
            {
              Vector RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(72/*OptCtorCall*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // OptCtorCall ::= CtorCall 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(72/*OptCtorCall*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // OptInit ::= 
            {
              STO RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(49/*OptInit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // OptInit ::= T_ASSIGN Expr 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(49/*OptInit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // OptRef ::= 
            {
              Boolean RESULT = null;
		
                        RESULT = Boolean.FALSE;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(40/*OptRef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // OptRef ::= T_AMPERSAND 
            {
              Boolean RESULT = null;
		
                        RESULT = Boolean.TRUE;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(40/*OptRef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ParamDecl ::= Type OptRef T_ID OptArrayList 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean _2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoParamDecl (_1, _4, _2, _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(50/*ParamDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ParamList ::= ParamList T_COMMA ParamDecl 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                        RESULT.addElement (_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(77/*ParamList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ParamList ::= ParamDecl 
            {
              Vector RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new Vector ();
                        RESULT.addElement (_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(77/*ParamList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // OptParamList ::= 
            {
              Vector RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(76/*OptParamList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // OptParamList ::= ParamList 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(76/*OptParamList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Stmt ::= DeleteStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(23/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Stmt ::= NewStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(23/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Stmt ::= WriteStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(23/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Stmt ::= ReadStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(23/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Stmt ::= ReturnStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(23/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Stmt ::= ExitStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(23/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Stmt ::= ContinueStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(23/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Stmt ::= BreakStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(23/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Stmt ::= ForeachStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(23/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Stmt ::= WhileStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(23/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Stmt ::= IfStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(23/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Stmt ::= Expr T_SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(23/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Stmt ::= CodeBlock 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(23/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Stmt ::= ConstDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(23/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Stmt ::= VarDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(23/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // StmtList ::= StmtList Stmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*StmtList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // StmtList ::= Stmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*StmtList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OptStmtList ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(21/*OptStmtList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OptStmtList ::= StmtList 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(21/*OptStmtList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CodeBlock ::= T_LBRACE NT$16 OptStmtList NT$17 T_RBRACE 
            {
              Object RESULT = null;
              // propagate RESULT from NT$16
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
              // propagate RESULT from NT$17
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(24/*CodeBlock*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$17 ::= 
            {
              Object RESULT = null;
 ((MyParser) parser).DoBlockClose(); 
              CUP$parser$result = new java_cup.runtime.Symbol(98/*NT$17*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NT$16 ::= 
            {
              Object RESULT = null;
 ((MyParser) parser).DoBlockOpen(false); 
              CUP$parser$result = new java_cup.runtime.Symbol(97/*NT$16*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Array ::= T_LBRACKET ConstExpr T_RBRACKET 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(48/*Array*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ArrayList ::= ArrayList Array 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                        RESULT.addElement (_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(75/*ArrayList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ArrayList ::= Array 
            {
              Vector RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new Vector ();
                        RESULT.addElement (_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(75/*ArrayList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OptArrayList ::= 
            {
              Vector RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(74/*OptArrayList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OptArrayList ::= ArrayList 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(74/*OptArrayList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Pointer ::= T_STAR 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(37/*Pointer*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // PointerList ::= PointerList Pointer 
            {
              Integer RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer _1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = (Integer) (1 + ((int) _1));
                    
              CUP$parser$result = new java_cup.runtime.Symbol(39/*PointerList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // PointerList ::= Pointer 
            {
              Integer RESULT = null;
		
                        RESULT = (Integer) 1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(39/*PointerList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OptPointerList ::= 
            {
              Integer RESULT = null;
		
                        RESULT = (Integer) 0;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(38/*OptPointerList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OptPointerList ::= PointerList 
            {
              Integer RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer _1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(38/*OptPointerList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ReturnType ::= T_VOID 
            {
              Type RESULT = null;
		
                        RESULT = VoidType.getBuiltinType();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(71/*ReturnType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ReturnType ::= Type 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(71/*ReturnType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // StructType ::= T_ID_U 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                       RESULT = ((MyParser) parser).DoStructType_ID (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(68/*StructType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // BasicType ::= T_BOOL 
            {
              Type RESULT = null;
		
                        RESULT = BoolType.getBuiltinType();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(66/*BasicType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // BasicType ::= T_FLOAT 
            {
              Type RESULT = null;
		
                        RESULT = FloatType.getBuiltinType();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(66/*BasicType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // BasicType ::= T_INT 
            {
              Type RESULT = null;
		
                        RESULT = IntType.getBuiltinType();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(66/*BasicType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DecoratedBasicType ::= BasicType OptPointerList 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer _2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = PointerType.createPointers(_1, _2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(67/*DecoratedBasicType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DecoratedType ::= StructType PointerList 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer _2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = PointerType.createPointers(_1, _2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(70/*DecoratedType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DecoratedType ::= DecoratedBasicType 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(70/*DecoratedType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Type ::= StructType 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(69/*Type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Type ::= DecoratedType 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(69/*Type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FuncDecl ::= T_EXTERN T_FUNCTION T_COLON ReturnType T_ID NT$14 T_LPAREN OptParamList T_RPAREN NT$15 T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$14
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
              // propagate RESULT from NT$15
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*FuncDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$15 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                        ((MyParser) parser).DoFormalParams(_4);
                        ((MyParser) parser).DoFuncDecl_2();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(96/*NT$15*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$14 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).DoFuncDecl_1(_1, _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(95/*NT$14*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FuncDef ::= T_FUNCTION T_COLON ReturnType OptRef T_ID NT$11 T_LPAREN OptParamList T_RPAREN NT$12 T_LBRACE OptStmtList NT$13 T_RBRACE 
            {
              Object RESULT = null;
              // propagate RESULT from NT$11
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
              // propagate RESULT from NT$12
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
              // propagate RESULT from NT$13
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Boolean _2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*FuncDef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$13 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Boolean _2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

                        ((MyParser) parser).DoFuncDeclReturnCheck();
                        ((MyParser) parser).DoFuncDecl_2();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(94/*NT$13*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$12 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Boolean _2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                        ((MyParser) parser).DoFormalParams(_4);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(93/*NT$12*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$11 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean _2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).SaveLineNum ();
                        ((MyParser) parser).DoFuncDecl_1(_1, _3, _2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(92/*NT$11*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FieldFuncDecl ::= FuncDef 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(20/*FieldFuncDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FieldFuncsList ::= FieldFuncsList FieldFuncDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*FieldFuncsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // FieldFuncsList ::= FieldFuncDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*FieldFuncsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OptFieldFuncsList ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*OptFieldFuncsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OptFieldFuncsList ::= FieldFuncsList 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*OptFieldFuncsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DtorDef ::= T_TILDE T_ID_U NT$10 T_LPAREN T_RPAREN T_LBRACE OptStmtList T_RBRACE 
            {
              Object RESULT = null;
              // propagate RESULT from NT$10
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		
                        ((MyParser) parser).DoFuncDecl_2();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(12/*DtorDef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$10 ::= 
            {
              Object RESULT = null;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).SaveLineNum ();
                        ((MyParser) parser).DoDtorDecl_1(_3);
                        ((MyParser) parser).DoFormalParams(null);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(91/*NT$10*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CtorDef ::= T_ID_U NT$8 T_LPAREN OptParamList T_RPAREN NT$9 T_LBRACE OptStmtList T_RBRACE 
            {
              Object RESULT = null;
              // propagate RESULT from NT$8
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
              // propagate RESULT from NT$9
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
                        ((MyParser) parser).DoFuncDecl_2();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(11/*CtorDef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$9 ::= 
            {
              Object RESULT = null;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                        ((MyParser) parser).DoFormalParams(_4);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(90/*NT$9*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$8 ::= 
            {
              Object RESULT = null;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).SaveLineNum ();
                        ((MyParser) parser).DoCtorDecl_1(_3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(89/*NT$8*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CtorDtorDecl ::= DtorDef 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*CtorDtorDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CtorDtorDecl ::= CtorDef 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*CtorDtorDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CtorDtorList ::= CtorDtorList CtorDtorDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*CtorDtorList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CtorDtorList ::= CtorDtorDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*CtorDtorList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OptCtorDtorList ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*OptCtorDtorList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OptCtorDtorList ::= CtorDtorList 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*OptCtorDtorList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FieldVarDecl ::= DecoratedType T_ID OptArrayList T_SEMI 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _3 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        ((MyParser) parser).DoFieldVarDecl (_1, _3, _2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(14/*FieldVarDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FieldVarsList ::= FieldVarsList FieldVarDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*FieldVarsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FieldVarsList ::= FieldVarDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*FieldVarsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // StructdefDecl ::= T_STRUCTDEF T_ID_U T_LBRACE NT$5 FieldVarsList OptCtorDtorList NT$6 OptFieldFuncsList NT$7 T_RBRACE T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$5
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
              // propagate RESULT from NT$6
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
              // propagate RESULT from NT$7
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*StructdefDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$7 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

                        ((MyParser) parser).DoStructdefDecl_2();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(88/*NT$7*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$6 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

                        ((MyParser) parser).DoStructdefDeclDefaultCtor();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(87/*NT$6*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$5 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                        ((MyParser) parser).DoStructdefDecl_1(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(86/*NT$5*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // OptStatic ::= 
            {
              String RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(42/*OptStatic*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // OptStatic ::= T_STATIC 
            {
              String RESULT = null;
		
                        RESULT = "static";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(42/*OptStatic*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ConstDecl ::= OptStatic T_CONST BasicType T_ID T_ASSIGN ConstExpr NT$4 T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$4
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _5 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*ConstDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$4 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _5 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).DoConstDecl (_2, _3, _5);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(85/*NT$4*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VarDecl ::= OptStatic StructType T_ID OptArrayList OptCtorCall NT$3 T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$3
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _5 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$3 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _5 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).DoVarStructDecl (_2, _4, _3, _5);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(84/*NT$3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VarDecl ::= OptStatic DecoratedType T_ID OptArrayList OptInit NT$2 T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$2
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _5 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$2 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _5 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).DoVarDecl (_1, _2, _4, _3, _5);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(83/*NT$2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ExternDecl ::= T_EXTERN DecoratedBasicType T_ID OptArrayList NT$1 T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$1
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*ExternDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$1 ::= 
            {
              Object RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).DoExternDecl (_2, _4, _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(82/*NT$1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // GlobalDecl ::= FuncDef 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // GlobalDecl ::= FuncDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // GlobalDecl ::= StructdefDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // GlobalDecl ::= ConstDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // GlobalDecl ::= VarDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // GlobalDecl ::= ExternDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // GlobalDecls ::= GlobalDecls GlobalDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*GlobalDecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // GlobalDecls ::= GlobalDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*GlobalDecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // OptGlobalDecls ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*OptGlobalDecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // OptGlobalDecls ::= GlobalDecls 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*OptGlobalDecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= Program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= NT$0 OptGlobalDecls 
            {
              Object RESULT = null;
              // propagate RESULT from NT$0
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        ((MyParser) parser).DoProgramEnd();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT = null;

                        ((MyParser) parser).DoProgramStart(); 
                    
              CUP$parser$result = new java_cup.runtime.Symbol(81/*NT$0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

